{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open AD Kit Documentation # About Open AD Kit # Open AD Kit aims to democratize autonomous drive (AD) systems by bringing the cloud and edge closer together. In doing so, Open AD Kit will lower the threshold for developing and deploying the Autoware software stack. For more details about the Open AD Kit project, its goals and details of the Autoware Foundation working group that oversees the project, refer to the Open AD Kit Working Group wiki . Open AD Kit documentation structure # Getting started # Start guide describes how to install, set up and run Autoware and its associated simulators on supported development platforms. System configuration describes the components that make up Open AD Kit in terms of the required hardware and software. Application example provides an actual application example for Open AD Kit that can be used as a reference for the development of other applications.","title":"Introduction"},{"location":"#open-ad-kit-documentation","text":"","title":"Open AD Kit Documentation"},{"location":"#about-open-ad-kit","text":"Open AD Kit aims to democratize autonomous drive (AD) systems by bringing the cloud and edge closer together. In doing so, Open AD Kit will lower the threshold for developing and deploying the Autoware software stack. For more details about the Open AD Kit project, its goals and details of the Autoware Foundation working group that oversees the project, refer to the Open AD Kit Working Group wiki .","title":"About Open AD Kit"},{"location":"#open-ad-kit-documentation-structure","text":"","title":"Open AD Kit documentation structure"},{"location":"#getting-started","text":"Start guide describes how to install, set up and run Autoware and its associated simulators on supported development platforms. System configuration describes the components that make up Open AD Kit in terms of the required hardware and software. Application example provides an actual application example for Open AD Kit that can be used as a reference for the development of other applications.","title":"Getting started"},{"location":"application-example/","text":"Application example # TODO","title":"Application example"},{"location":"application-example/#application-example","text":"TODO","title":"Application example"},{"location":"start-guide/","text":"Start guide # This page describes how to install, set up and run Autoware and its associated simulators on supported development platforms. Installation explains how to set up the development environment that are described in the System Configuration chapter. How to run Autoware shows how to run Autoware on the development platform that are set up in the Installation chapter. How to run simulators demonstrates how to run simulators that are set up in the Installation chapter.","title":"Start guide"},{"location":"start-guide/#start-guide","text":"This page describes how to install, set up and run Autoware and its associated simulators on supported development platforms. Installation explains how to set up the development environment that are described in the System Configuration chapter. How to run Autoware shows how to run Autoware on the development platform that are set up in the Installation chapter. How to run simulators demonstrates how to run simulators that are set up in the Installation chapter.","title":"Start guide"},{"location":"start-guide/how-to-run-autoware/","text":"How to run Autoware # This page explains how to run Autoware on the development platform that are set up in the Installation chapter. Minimum requirements # Developer Platform: TODO In-Vehicle Development Platform 1 : TODO Software Tool: TODO Container Image: TODO 1. Run Autoware on the developer platform # TODO 2. Run Autoware on the in-vehicle development platform # If you do NOT need a vehicle-edge platform, please skip this step. TODO 3. Run simulators on the development platform # Please refer to the How to run simulators section. This is optional if you do NOT need a vehicle-edge platform. \u21a9","title":"How to run Autoware"},{"location":"start-guide/how-to-run-autoware/#how-to-run-autoware","text":"This page explains how to run Autoware on the development platform that are set up in the Installation chapter.","title":"How to run Autoware"},{"location":"start-guide/how-to-run-autoware/#minimum-requirements","text":"Developer Platform: TODO In-Vehicle Development Platform 1 : TODO Software Tool: TODO Container Image: TODO","title":"Minimum requirements"},{"location":"start-guide/how-to-run-autoware/#1-run-autoware-on-the-developer-platform","text":"TODO","title":"1. Run Autoware on the developer platform"},{"location":"start-guide/how-to-run-autoware/#2-run-autoware-on-the-in-vehicle-development-platform","text":"If you do NOT need a vehicle-edge platform, please skip this step. TODO","title":"2. Run Autoware on the in-vehicle development platform"},{"location":"start-guide/how-to-run-autoware/#3-run-simulators-on-the-development-platform","text":"Please refer to the How to run simulators section. This is optional if you do NOT need a vehicle-edge platform. \u21a9","title":"3. Run simulators on the development platform"},{"location":"start-guide/how-to-run-simulators/","text":"How to run simulators # This page describes how to run simulators that work on your local environment and the cloud environment. Scenario simulator verifies your planning algorithms. Logging simulator verifies your perception algorithms with ROSBAG data that are recorded beforehand.","title":"How to run simulators"},{"location":"start-guide/how-to-run-simulators/#how-to-run-simulators","text":"This page describes how to run simulators that work on your local environment and the cloud environment. Scenario simulator verifies your planning algorithms. Logging simulator verifies your perception algorithms with ROSBAG data that are recorded beforehand.","title":"How to run simulators"},{"location":"start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/","text":"Run on the cloud platform # This page describes how to run the logging simulator on the cloud platform. The cloud platform, Web.Auto, is offered by TIER IV , and it is available for the Autoware Foundation members. Minimum requirements # Developer Platform: TODO In-Vehicle Development Platform 1 : TODO Software Tool: TODO Container Image: TODO Data Pipeline: TODO 1. Create your account on the cloud platform # If you already have access to Web.Auto, please skip this step. TODO 2. Set up a simulation on the cloud platform # TODO 3. Run the logging simulator on the cloud platform # TODO This is optional if you do NOT need a vehicle-edge platform. \u21a9","title":"Run on the cloud platform"},{"location":"start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/#run-on-the-cloud-platform","text":"This page describes how to run the logging simulator on the cloud platform. The cloud platform, Web.Auto, is offered by TIER IV , and it is available for the Autoware Foundation members.","title":"Run on the cloud platform"},{"location":"start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/#minimum-requirements","text":"Developer Platform: TODO In-Vehicle Development Platform 1 : TODO Software Tool: TODO Container Image: TODO Data Pipeline: TODO","title":"Minimum requirements"},{"location":"start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/#1-create-your-account-on-the-cloud-platform","text":"If you already have access to Web.Auto, please skip this step. TODO","title":"1. Create your account on the cloud platform"},{"location":"start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/#2-set-up-a-simulation-on-the-cloud-platform","text":"TODO","title":"2. Set up a simulation on the cloud platform"},{"location":"start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/#3-run-the-logging-simulator-on-the-cloud-platform","text":"TODO This is optional if you do NOT need a vehicle-edge platform. \u21a9","title":"3. Run the logging simulator on the cloud platform"},{"location":"start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/","text":"Run on the cloud platform # This page describes how to run the scenario simulator on the cloud platform. The cloud platform, Web.Auto, is offered by TIER IV , and it is available for the Autoware Foundation members. Minimum requirements # Developer Platform: TODO In-Vehicle Development Platform 1 : TODO Software Tool: TODO Container Image: TODO Data Pipeline: TODO 1. Create your account on the cloud platform # If you already have access to Web.Auto, please skip this step. TODO 2. Set up a simulation on the cloud platform # TODO 3. Run the scenario simulator on the cloud platform # TODO This is optional if you do NOT need a vehicle-edge platform. \u21a9","title":"Run on the cloud platform"},{"location":"start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#run-on-the-cloud-platform","text":"This page describes how to run the scenario simulator on the cloud platform. The cloud platform, Web.Auto, is offered by TIER IV , and it is available for the Autoware Foundation members.","title":"Run on the cloud platform"},{"location":"start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#minimum-requirements","text":"Developer Platform: TODO In-Vehicle Development Platform 1 : TODO Software Tool: TODO Container Image: TODO Data Pipeline: TODO","title":"Minimum requirements"},{"location":"start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#1-create-your-account-on-the-cloud-platform","text":"If you already have access to Web.Auto, please skip this step. TODO","title":"1. Create your account on the cloud platform"},{"location":"start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#2-set-up-a-simulation-on-the-cloud-platform","text":"TODO","title":"2. Set up a simulation on the cloud platform"},{"location":"start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#3-run-the-scenario-simulator-on-the-cloud-platform","text":"TODO This is optional if you do NOT need a vehicle-edge platform. \u21a9","title":"3. Run the scenario simulator on the cloud platform"},{"location":"start-guide/how-to-run-simulators/scenario-simulator/run-on-local-env/","text":"Run on your local environment # This page describes how to run the scenario simulator on the developer platform that is set up in the Installation chapter. Minimum requirements # Developer Platform: TODO In-Vehicle Development Platform 1 : TODO Software Tool: TODO Container Image: TODO Data Pipeline: TODO 1. Set up a simulation on the developer platform # TODO 2. Run the scenario simulator on the developer platform # TODO This is optional if you do NOT need a vehicle-edge platform. \u21a9","title":"Run on your local environment"},{"location":"start-guide/how-to-run-simulators/scenario-simulator/run-on-local-env/#run-on-your-local-environment","text":"This page describes how to run the scenario simulator on the developer platform that is set up in the Installation chapter.","title":"Run on your local environment"},{"location":"start-guide/how-to-run-simulators/scenario-simulator/run-on-local-env/#minimum-requirements","text":"Developer Platform: TODO In-Vehicle Development Platform 1 : TODO Software Tool: TODO Container Image: TODO Data Pipeline: TODO","title":"Minimum requirements"},{"location":"start-guide/how-to-run-simulators/scenario-simulator/run-on-local-env/#1-set-up-a-simulation-on-the-developer-platform","text":"TODO","title":"1. Set up a simulation on the developer platform"},{"location":"start-guide/how-to-run-simulators/scenario-simulator/run-on-local-env/#2-run-the-scenario-simulator-on-the-developer-platform","text":"TODO This is optional if you do NOT need a vehicle-edge platform. \u21a9","title":"2. Run the scenario simulator on the developer platform"},{"location":"start-guide/installation/","text":"Installation # This page explains how to set up the development environment that are described in the System Configuration chapter. The following contents are diverted from Open AD Kit version 1.0 . These contents will be updated for Open AD Kit version 2.0. Minimum requirements # Developer Platform: AVA Platform or PCU Platform In-Vehicle Development Platform 1 : TODO Software Tool: Scenario simulator version x.x 2 Rviz version x.x 2 Container Image: Autoware.Auto for arm64 Scenario simulator for x86_64 2 The following diagram shows a minimum configuration of Open AD Kit. \"Your host machine\" will be replaced by the cloud development platform if you can use Web.Auto. 1. Set up the developer platform # The setup procedure depends on the developer platform. AVA Platform # Getting started with EWAOL Boot EWAOL via SSD Boot Extend rootfs partition PCU Platform # Getting started with PCU 2. Set up the in-vehicle platform # If you do NOT need a vehicle-edge platform, please skip this step. TODO 3. Install Autoware container images on the developer platform # AVA Platform # System setup on AVA Platform PCU Platform # System setup on PCU 4. Install Autoware container images on the in-vehicle platform # If you do NOT need a vehicle-edge platform, please skip this step. TODO 5. Set up software tools # If you can use the cloud development platform, please skip this step. AVA Platform # System setup on your host PCU Platform # System setup on your host 6. Run Autoware on the development platform # Please refer to the How to run Autoware section. This is unnecessary if you do NOT need a vehicle-edge platform. \u21a9 This is unnecessary if you can use the cloud development platform, Web.Auto. \u21a9 \u21a9 \u21a9","title":"Installation"},{"location":"start-guide/installation/#installation","text":"This page explains how to set up the development environment that are described in the System Configuration chapter. The following contents are diverted from Open AD Kit version 1.0 . These contents will be updated for Open AD Kit version 2.0.","title":"Installation"},{"location":"start-guide/installation/#minimum-requirements","text":"Developer Platform: AVA Platform or PCU Platform In-Vehicle Development Platform 1 : TODO Software Tool: Scenario simulator version x.x 2 Rviz version x.x 2 Container Image: Autoware.Auto for arm64 Scenario simulator for x86_64 2 The following diagram shows a minimum configuration of Open AD Kit. \"Your host machine\" will be replaced by the cloud development platform if you can use Web.Auto.","title":"Minimum requirements"},{"location":"start-guide/installation/#1-set-up-the-developer-platform","text":"The setup procedure depends on the developer platform.","title":"1. Set up the developer platform"},{"location":"start-guide/installation/#ava-platform","text":"Getting started with EWAOL Boot EWAOL via SSD Boot Extend rootfs partition","title":"AVA Platform"},{"location":"start-guide/installation/#pcu-platform","text":"Getting started with PCU","title":"PCU Platform"},{"location":"start-guide/installation/#2-set-up-the-in-vehicle-platform","text":"If you do NOT need a vehicle-edge platform, please skip this step. TODO","title":"2. Set up the in-vehicle platform"},{"location":"start-guide/installation/#3-install-autoware-container-images-on-the-developer-platform","text":"","title":"3. Install Autoware container images on the developer platform"},{"location":"start-guide/installation/#ava-platform_1","text":"System setup on AVA Platform","title":"AVA Platform"},{"location":"start-guide/installation/#pcu-platform_1","text":"System setup on PCU","title":"PCU Platform"},{"location":"start-guide/installation/#4-install-autoware-container-images-on-the-in-vehicle-platform","text":"If you do NOT need a vehicle-edge platform, please skip this step. TODO","title":"4. Install Autoware container images on the in-vehicle platform"},{"location":"start-guide/installation/#5-set-up-software-tools","text":"If you can use the cloud development platform, please skip this step.","title":"5. Set up software tools"},{"location":"start-guide/installation/#ava-platform_2","text":"System setup on your host","title":"AVA Platform"},{"location":"start-guide/installation/#pcu-platform_2","text":"System setup on your host","title":"PCU Platform"},{"location":"start-guide/installation/#6-run-autoware-on-the-development-platform","text":"Please refer to the How to run Autoware section. This is unnecessary if you do NOT need a vehicle-edge platform. \u21a9 This is unnecessary if you can use the cloud development platform, Web.Auto. \u21a9 \u21a9 \u21a9","title":"6. Run Autoware on the development platform"},{"location":"start-guide/installation/boot-ewaol/","text":"Boot EWAOL via SSD Boot # Overview # You need to use SSD enclosure case to flash yocto image to M.2 SSD directly. Get yocto image # Build yocto image with EWAOL by following the instructions Getting started with EWAOL , or Download the image from the website to your host machine; AVA Developer Platform Downloads \u2013 I-Pi SMARC (:white_check_mark: Yocto with SOAFEE is preferred.) Flash yocto image # Remove M.2 SSD from AVA platform and flash yocto image to it directly. Remove M.2 SSD from AVA platform. Install M.2 SSD into a M.2 enclosure case. Plug it into your host machine. Then, show available block devices. lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT ... sdn 8:208 0 119.2G 0 disk \u251c\u2500sdn1 8:209 0 512M 0 part \u251c\u2500sdn2 8:210 0 1G 0 part /media/foo/7d00c690-db24-462d-8c8d-dce7bdf151d8 \u2514\u2500sdn3 8:211 0 117.8G 0 part Flush yocto image to M.2 SSD. :speech_balloon: For example sudo dd if=ewaol-image-docker-comhpc-20211022083723.rootfs.wic of=/dev/sdn bs=1M status=progress && sync Extend rootfs partition # You have to extend rootfs partition. Follow the instructions Extend rootfs partition Reinstall SSD # Remove M.2 SSD from enclosure case and install it into AVA platform, then turn it on. The following screen comes up, then login as root without password. EWAOL (Edge Workload Abstraction and Orchestration Layer) 0.1 comhpc tty1 comhpc login: :speech_balloon: You are able to access via SSH.","title":"Boot EWAOL via SSD Boot"},{"location":"start-guide/installation/boot-ewaol/#boot-ewaol-via-ssd-boot","text":"","title":"Boot EWAOL via SSD Boot"},{"location":"start-guide/installation/boot-ewaol/#overview","text":"You need to use SSD enclosure case to flash yocto image to M.2 SSD directly.","title":"Overview"},{"location":"start-guide/installation/boot-ewaol/#get-yocto-image","text":"Build yocto image with EWAOL by following the instructions Getting started with EWAOL , or Download the image from the website to your host machine; AVA Developer Platform Downloads \u2013 I-Pi SMARC (:white_check_mark: Yocto with SOAFEE is preferred.)","title":"Get yocto image"},{"location":"start-guide/installation/boot-ewaol/#flash-yocto-image","text":"Remove M.2 SSD from AVA platform and flash yocto image to it directly. Remove M.2 SSD from AVA platform. Install M.2 SSD into a M.2 enclosure case. Plug it into your host machine. Then, show available block devices. lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT ... sdn 8:208 0 119.2G 0 disk \u251c\u2500sdn1 8:209 0 512M 0 part \u251c\u2500sdn2 8:210 0 1G 0 part /media/foo/7d00c690-db24-462d-8c8d-dce7bdf151d8 \u2514\u2500sdn3 8:211 0 117.8G 0 part Flush yocto image to M.2 SSD. :speech_balloon: For example sudo dd if=ewaol-image-docker-comhpc-20211022083723.rootfs.wic of=/dev/sdn bs=1M status=progress && sync","title":"Flash yocto image"},{"location":"start-guide/installation/boot-ewaol/#extend-rootfs-partition","text":"You have to extend rootfs partition. Follow the instructions Extend rootfs partition","title":"Extend rootfs partition"},{"location":"start-guide/installation/boot-ewaol/#reinstall-ssd","text":"Remove M.2 SSD from enclosure case and install it into AVA platform, then turn it on. The following screen comes up, then login as root without password. EWAOL (Edge Workload Abstraction and Orchestration Layer) 0.1 comhpc tty1 comhpc login: :speech_balloon: You are able to access via SSH.","title":"Reinstall SSD"},{"location":"start-guide/installation/extend-rootfs/","text":"Extend rootfs partition # Overview # The rootfs partition is created with 5.2GB, but the size is too short to run docker container. So we have to extend rootfs partition, or create new partition and assign the whole docker folder to the new partition. Here is the instruction how to extend rootfs partition Extend rootfs # Run gparted . You may get the following warning when you run gparted . Press Fix . Contents of storage after we flashed yocto image to M.2 SSD. Unmount partitions. To manipulate partitions, you need to unmount root and data partition. Right click root partition, then click Unmount . Unmount data partition as well. Move data partition to the end of storage. Right click data partition, then click Resize/Move . Drag the square to the right end. Then, click Resize/Move . Click OK . Extend rootfs partition to the end of disk. Right click root partition, then click Resize/Move . Extend the square to the right end. Then, click Resize/Move . Apply changes. Click check mark icon. Click Apply . You can get rootfs as follows.","title":"Extend rootfs partition"},{"location":"start-guide/installation/extend-rootfs/#extend-rootfs-partition","text":"","title":"Extend rootfs partition"},{"location":"start-guide/installation/extend-rootfs/#overview","text":"The rootfs partition is created with 5.2GB, but the size is too short to run docker container. So we have to extend rootfs partition, or create new partition and assign the whole docker folder to the new partition. Here is the instruction how to extend rootfs partition","title":"Overview"},{"location":"start-guide/installation/extend-rootfs/#extend-rootfs","text":"Run gparted . You may get the following warning when you run gparted . Press Fix . Contents of storage after we flashed yocto image to M.2 SSD. Unmount partitions. To manipulate partitions, you need to unmount root and data partition. Right click root partition, then click Unmount . Unmount data partition as well. Move data partition to the end of storage. Right click data partition, then click Resize/Move . Drag the square to the right end. Then, click Resize/Move . Click OK . Extend rootfs partition to the end of disk. Right click root partition, then click Resize/Move . Extend the square to the right end. Then, click Resize/Move . Apply changes. Click check mark icon. Click Apply . You can get rootfs as follows.","title":"Extend rootfs"},{"location":"start-guide/installation/getting-started-pcu/","text":"Getting started with PCU # Overview # Reference: PCU Setup Guide This instruction explains how to boot up Ubuntu on PCU and access it from host PC. If you are using onboard 64G EMMC as boot device, it's already been pre-installed with Ubuntu 20.04, and you can skip this step; If you would like to boot from SD card, you could either request a Micro SD card with pre-installed system or flash by yourself under instructions in below section. :white_check_mark: Ubuntu 20.04 is preferred. Hardware Setup # The minimum recommended External Micro SD card size is 64GB, and the speed should be at least class 10 A1, it is strongly recommended to use high speed SD card, e.g. class U3, A2. To boot from SD card, \"SW1\" should be set as: ON , and SD card should be plugged in. For blank SD card, the system image need to be flashed first using another PC. Get MPU image # Official images with recommended OS are available on PCU Resource Download page. Resource Download Page For PCU 2.0 hardware, please download the MPU image file for SD card as marked red to your local storage. Flash MPU image # To flash MPU image on SD card, you will need a PC with a micro SD card reader. This step could be done on either Windows or Linux PC with different flash tools. Linux will be used in this instruction as example: Insert card reader with target micro SD card to host PC. Find out device name for the SD card. sudo lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT ... sda 8:0 0 238.5G 0 disk \u251c\u2500sda1 8:1 0 512M 0 part /boot/efi \u2514\u2500sda2 8:2 0 238G 0 part / sdb 8:16 0 447.1G 0 disk \u251c\u2500sdb1 8:17 0 428.4G 0 part \u251c\u2500sdb2 8:18 0 513M 0 part \u2514\u2500sdb3 8:19 0 18.2G 0 part sdc 8:32 1 14.9G 0 disk \u2514\u2500sdc1 8:33 1 14.9G 0 part /media/adlink/B4A1-62CD :speech_balloon: In this case, sdc is the device name Flash image to SD card. sudo gzip -dc YOUR-DOWNLOAD-PATH/xxx.gz |sudo dd of=/dev/YOUR-DEVICE For example; sudo gzip -dc ~/Downloads/autocore-1046-ubuntu20.04-sd-pcu2.0-sw0.5.0-20201210.gz |sudo dd of=/dev/sdc Wait patiently until the flash process finishes, this may take up to half hour. Boot up. Now you can plug in the SD card to PCU and power up. The system should be ready to work. Connect To PCU via SSH # You could connect to PCU via SSh either by ethernet or serial port. The default username, password and IP address of PCU is as below: SSH through ethernet # Cable connection Connect host PC to RJ45 2 / RJ45 3 / RJ45 4 Eth port (Blue) on PCU board with Ethernet cable (GbE, need Cat.5e or above). Configure static IP for host PC You need to manually configure static IP for PC in order to connect with PCU, as there is no DHCP server running on PCU. The static IP should be different with PCU and within the same network segment. (e.g. 192.168.1.200) SSH login ssh user@192.168.1.239 SSH through Serial Port # Cable connection As an alternative, you could also choose to connect to PCU by micro USB (ttyUSB port in figure blow). ttyUSB Settings For Linux users, you could use \"cutecom\" to connect to PCU. sudo apt install cutecom cutecom Please set parameters as follows, Device shall be chosen based on your host PC. For other system users, the parameters are: Parameter Value Baudrate 115200 Data 8 Stop bit 1 Parity None Hardware flow control no Software flow control no Reset PCU and Login Press reset button and wait until login. ssh user@192.168.1.239 Check PCU public IP Address # Connect PCU to internet via RJ45 1 Eth port (Red), this Eth port is configured to obtain IP address automatically from DHCP by default. From section above, you can SSH connect to PCU, and you can look for IP address of the public ethernet port(fm1-mac5). ifconfig fm1-mac5 fm1-mac5: flags=4163<UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet 192.168.10.221 netmask 255.255.255.0 broadcast 192.168.10.255 inet6 fe80::204:7cff:fe2e:191 prefixlen 64 scopeid 0x20<link> ether 00:04:7c:2e:01:91 txqueuelen 1000 (Ethernet) RX packets 2806 bytes 3665212 (3.6 MB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 2238 bytes 175964 (175.9 KB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 device memory 0x1ae8000-1ae8fff :speech_balloon: You can find IP address of PCU such as 192.168.10.221 .","title":"Getting started with PCU"},{"location":"start-guide/installation/getting-started-pcu/#getting-started-with-pcu","text":"","title":"Getting started with PCU"},{"location":"start-guide/installation/getting-started-pcu/#overview","text":"Reference: PCU Setup Guide This instruction explains how to boot up Ubuntu on PCU and access it from host PC. If you are using onboard 64G EMMC as boot device, it's already been pre-installed with Ubuntu 20.04, and you can skip this step; If you would like to boot from SD card, you could either request a Micro SD card with pre-installed system or flash by yourself under instructions in below section. :white_check_mark: Ubuntu 20.04 is preferred.","title":"Overview"},{"location":"start-guide/installation/getting-started-pcu/#hardware-setup","text":"The minimum recommended External Micro SD card size is 64GB, and the speed should be at least class 10 A1, it is strongly recommended to use high speed SD card, e.g. class U3, A2. To boot from SD card, \"SW1\" should be set as: ON , and SD card should be plugged in. For blank SD card, the system image need to be flashed first using another PC.","title":"Hardware Setup"},{"location":"start-guide/installation/getting-started-pcu/#get-mpu-image","text":"Official images with recommended OS are available on PCU Resource Download page. Resource Download Page For PCU 2.0 hardware, please download the MPU image file for SD card as marked red to your local storage.","title":"Get MPU image"},{"location":"start-guide/installation/getting-started-pcu/#flash-mpu-image","text":"To flash MPU image on SD card, you will need a PC with a micro SD card reader. This step could be done on either Windows or Linux PC with different flash tools. Linux will be used in this instruction as example: Insert card reader with target micro SD card to host PC. Find out device name for the SD card. sudo lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT ... sda 8:0 0 238.5G 0 disk \u251c\u2500sda1 8:1 0 512M 0 part /boot/efi \u2514\u2500sda2 8:2 0 238G 0 part / sdb 8:16 0 447.1G 0 disk \u251c\u2500sdb1 8:17 0 428.4G 0 part \u251c\u2500sdb2 8:18 0 513M 0 part \u2514\u2500sdb3 8:19 0 18.2G 0 part sdc 8:32 1 14.9G 0 disk \u2514\u2500sdc1 8:33 1 14.9G 0 part /media/adlink/B4A1-62CD :speech_balloon: In this case, sdc is the device name Flash image to SD card. sudo gzip -dc YOUR-DOWNLOAD-PATH/xxx.gz |sudo dd of=/dev/YOUR-DEVICE For example; sudo gzip -dc ~/Downloads/autocore-1046-ubuntu20.04-sd-pcu2.0-sw0.5.0-20201210.gz |sudo dd of=/dev/sdc Wait patiently until the flash process finishes, this may take up to half hour. Boot up. Now you can plug in the SD card to PCU and power up. The system should be ready to work.","title":"Flash MPU image"},{"location":"start-guide/installation/getting-started-pcu/#connect-to-pcu-via-ssh","text":"You could connect to PCU via SSh either by ethernet or serial port. The default username, password and IP address of PCU is as below:","title":"Connect To PCU via SSH"},{"location":"start-guide/installation/getting-started-pcu/#ssh-through-ethernet","text":"Cable connection Connect host PC to RJ45 2 / RJ45 3 / RJ45 4 Eth port (Blue) on PCU board with Ethernet cable (GbE, need Cat.5e or above). Configure static IP for host PC You need to manually configure static IP for PC in order to connect with PCU, as there is no DHCP server running on PCU. The static IP should be different with PCU and within the same network segment. (e.g. 192.168.1.200) SSH login ssh user@192.168.1.239","title":"SSH through ethernet"},{"location":"start-guide/installation/getting-started-pcu/#ssh-through-serial-port","text":"Cable connection As an alternative, you could also choose to connect to PCU by micro USB (ttyUSB port in figure blow). ttyUSB Settings For Linux users, you could use \"cutecom\" to connect to PCU. sudo apt install cutecom cutecom Please set parameters as follows, Device shall be chosen based on your host PC. For other system users, the parameters are: Parameter Value Baudrate 115200 Data 8 Stop bit 1 Parity None Hardware flow control no Software flow control no Reset PCU and Login Press reset button and wait until login. ssh user@192.168.1.239","title":"SSH through Serial Port"},{"location":"start-guide/installation/getting-started-pcu/#check-pcu-public-ip-address","text":"Connect PCU to internet via RJ45 1 Eth port (Red), this Eth port is configured to obtain IP address automatically from DHCP by default. From section above, you can SSH connect to PCU, and you can look for IP address of the public ethernet port(fm1-mac5). ifconfig fm1-mac5 fm1-mac5: flags=4163<UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet 192.168.10.221 netmask 255.255.255.0 broadcast 192.168.10.255 inet6 fe80::204:7cff:fe2e:191 prefixlen 64 scopeid 0x20<link> ether 00:04:7c:2e:01:91 txqueuelen 1000 (Ethernet) RX packets 2806 bytes 3665212 (3.6 MB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 2238 bytes 175964 (175.9 KB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 device memory 0x1ae8000-1ae8fff :speech_balloon: You can find IP address of PCU such as 192.168.10.221 .","title":"Check PCU public IP Address"},{"location":"start-guide/installation/getting-started/","text":"Getting started with EWAOL # Overview # Reference: Project Quickstart \u2014 EWAOL documentation This instruction explain how to build yocto image with EWAOL on your host machine. If you are using AVA Developer Platform , you can also download built image from ADLINK's website, and you can skip this steps; AVA Developer Platform Downloads \u2013 I-Pi SMARC :white_check_mark: Yocto with SOAFEE is preferred. Build Host Setup # Install required packages for the build host by following The Yocto Project \u00ae 3.3.1 documentation . sudo apt-get install gawk wget git diffstat unzip texinfo gcc build-essential chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev pylint3 xterm python3-subunit mesa-common-dev Install the kas setup tool. sudo -H pip3 install kas Checkout the repository for AVA platform # ADLINK / meta-adlink-ampere git clone https://github.com/ADLINK/meta-adlink-ampere.git EWAOL / meta-ewaol cd meta-adlink-ampere git clone https://git.gitlab.arm.com/ewaol/meta-ewaol.git Build via kas kas build ComHpc.yml :warning: You should be careful of utilizing full CPU power during build. You can choose the way to boot EWAOL, SSD Boot(highly recommended) or USB Boot. :white_check_mark: SSD Boot (highly recommended) You need to use SSD enclosure case to flash yocto image to M.2 SSD directly. USB Boot You need to use 32GB USB, not 64GB USB to flash yocto image. :warning: Do not use 64GB USB because bios gets stuck due to EDKII bug.","title":"Getting started with EWAOL"},{"location":"start-guide/installation/getting-started/#getting-started-with-ewaol","text":"","title":"Getting started with EWAOL"},{"location":"start-guide/installation/getting-started/#overview","text":"Reference: Project Quickstart \u2014 EWAOL documentation This instruction explain how to build yocto image with EWAOL on your host machine. If you are using AVA Developer Platform , you can also download built image from ADLINK's website, and you can skip this steps; AVA Developer Platform Downloads \u2013 I-Pi SMARC :white_check_mark: Yocto with SOAFEE is preferred.","title":"Overview"},{"location":"start-guide/installation/getting-started/#build-host-setup","text":"Install required packages for the build host by following The Yocto Project \u00ae 3.3.1 documentation . sudo apt-get install gawk wget git diffstat unzip texinfo gcc build-essential chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev pylint3 xterm python3-subunit mesa-common-dev Install the kas setup tool. sudo -H pip3 install kas","title":"Build Host Setup"},{"location":"start-guide/installation/getting-started/#checkout-the-repository-for-ava-platform","text":"ADLINK / meta-adlink-ampere git clone https://github.com/ADLINK/meta-adlink-ampere.git EWAOL / meta-ewaol cd meta-adlink-ampere git clone https://git.gitlab.arm.com/ewaol/meta-ewaol.git Build via kas kas build ComHpc.yml :warning: You should be careful of utilizing full CPU power during build. You can choose the way to boot EWAOL, SSD Boot(highly recommended) or USB Boot. :white_check_mark: SSD Boot (highly recommended) You need to use SSD enclosure case to flash yocto image to M.2 SSD directly. USB Boot You need to use 32GB USB, not 64GB USB to flash yocto image. :warning: Do not use 64GB USB because bios gets stuck due to EDKII bug.","title":"Checkout the repository for AVA platform"},{"location":"start-guide/installation/system-setup-ava/","text":"System Setup on AVA platform # Overview # This instruction explains how to perform system setup for test execution on AVA platform. You need to copy docker images and necessary files. Access to AVA platform via SSH # ssh root@IP-ADDRESS For example; ssh root@192.168.10.27 Copy Autoware.Auto image to AVA platform # The docker image of Autoware.Auto is registered in GitLab Container Registry . Copy docker image to AVA platform. docker pull registry.gitlab.com/autowarefoundation/autoware.auto/autowareauto/arm64/openadkit-foxy:latest Copy necessary files to USB drive # Copy files related to map contents . Files are placed in the directory :file_folder: docs/Appendix/Open-AD-Kit-Start-Guide/map :page_facing_up: lanelet2_map.osm :page_facing_up: pointcloud_map.pcd :page_facing_up: global_map_center.pcd.yaml :page_facing_up: lanelet2_map_provider.osm.yaml :page_facing_up: map.map_publisher.yaml Copy files to your USB drive as the following directory structure. Copy configuration file of Cyclone DDS . In this test, we are using Cyclone DDS, so you also need to copy configuration file of Cyclone DDS. File is placed in the directory :file_folder: docs/Appendix/Open-AD-Kit-Start-Guide/cyclonedds :page_facing_up: cyclonedds.xml Copy the file to your USB drive as the following directory structure. Copy kernel configuration file for tuning kernel parameters. We have to reconfigure kernel parameters by using sysctl for system stability. File is placed in the directory :file_folder: docs/Appendix/Open-AD-Kit-Start-Guide/sysctl.d :page_facing_up: 60_cyclonedds.conf Copy the file to your USB root. Copy files from USB drive to AVA platform # Plug your USB drive into AVA platform and copy files Find USB device name. lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:16 1 28.9G 0 disk `-sda1 8:17 1 28.9G 0 part nvme0n1 259:0 0 119.2G 0 disk |-nvme0n1p1 259:1 0 256M 0 part |-nvme0n1p2 259:2 0 118G 0 part / `-nvme0n1p3 259:3 0 1G 0 part Mount USB driver and copy directory. mkdir -p /mnt/usb mount /dev/sda1 /mnt/usb cp -r /mnt/usb/* ~/ Move kernel configuration file to /etc/sysctl.d . mv ~/60_cyclonedds.conf /etc/sysctl.d Update kernel parameters. sysctl -p /etc/sysctl.d/60_cyclonedds.conf Modify cyclonedds.xml # You need to change the element NetworkInterfaceAddress to the network interface currently in use. Find network interface. ip addr 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enP4p4s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:11:22:33:44:55 brd ff:ff:ff:ff:ff:ff inet 192.168.10.27/24 brd 192.168.10.255 scope global dynamic enP4p4s0 valid_lft 332sec preferred_lft 332sec inet 192.168.10.13/24 brd 192.168.10.255 scope global secondary dynamic noprefixroute enP4p4s0 valid_lft 337sec preferred_lft 262sec inet6 fe80::34c:b6f7:b356:b7/64 scope link valid_lft forever preferred_lft forever inet6 fe80::230:64ff:fe1a:a65/64 scope link valid_lft forever preferred_lft forever 3: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default link/ether aa:bb:cc:dd:ee:ff brd ff:ff:ff:ff:ff:ff inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0 valid_lft forever preferred_lft forever :speech_balloon: You can find a network interface such as enP4p4s0 . Change the NetworkInterfaceAddress . vi ~/cyclonedds/cyclonedds.xml For example; :page_facing_up: cyclonedds.xml <General> - <NetworkInterfaceAddress>lo</NetworkInterfaceAddress> + <NetworkInterfaceAddress>enP4p4s0</NetworkInterfaceAddress> </General>","title":"System Setup on AVA platform"},{"location":"start-guide/installation/system-setup-ava/#system-setup-on-ava-platform","text":"","title":"System Setup on AVA platform"},{"location":"start-guide/installation/system-setup-ava/#overview","text":"This instruction explains how to perform system setup for test execution on AVA platform. You need to copy docker images and necessary files.","title":"Overview"},{"location":"start-guide/installation/system-setup-ava/#access-to-ava-platform-via-ssh","text":"ssh root@IP-ADDRESS For example; ssh root@192.168.10.27","title":"Access to AVA platform via SSH"},{"location":"start-guide/installation/system-setup-ava/#copy-autowareauto-image-to-ava-platform","text":"The docker image of Autoware.Auto is registered in GitLab Container Registry . Copy docker image to AVA platform. docker pull registry.gitlab.com/autowarefoundation/autoware.auto/autowareauto/arm64/openadkit-foxy:latest","title":"Copy Autoware.Auto image to AVA platform"},{"location":"start-guide/installation/system-setup-ava/#copy-necessary-files-to-usb-drive","text":"Copy files related to map contents . Files are placed in the directory :file_folder: docs/Appendix/Open-AD-Kit-Start-Guide/map :page_facing_up: lanelet2_map.osm :page_facing_up: pointcloud_map.pcd :page_facing_up: global_map_center.pcd.yaml :page_facing_up: lanelet2_map_provider.osm.yaml :page_facing_up: map.map_publisher.yaml Copy files to your USB drive as the following directory structure. Copy configuration file of Cyclone DDS . In this test, we are using Cyclone DDS, so you also need to copy configuration file of Cyclone DDS. File is placed in the directory :file_folder: docs/Appendix/Open-AD-Kit-Start-Guide/cyclonedds :page_facing_up: cyclonedds.xml Copy the file to your USB drive as the following directory structure. Copy kernel configuration file for tuning kernel parameters. We have to reconfigure kernel parameters by using sysctl for system stability. File is placed in the directory :file_folder: docs/Appendix/Open-AD-Kit-Start-Guide/sysctl.d :page_facing_up: 60_cyclonedds.conf Copy the file to your USB root.","title":"Copy necessary files to USB drive"},{"location":"start-guide/installation/system-setup-ava/#copy-files-from-usb-drive-to-ava-platform","text":"Plug your USB drive into AVA platform and copy files Find USB device name. lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:16 1 28.9G 0 disk `-sda1 8:17 1 28.9G 0 part nvme0n1 259:0 0 119.2G 0 disk |-nvme0n1p1 259:1 0 256M 0 part |-nvme0n1p2 259:2 0 118G 0 part / `-nvme0n1p3 259:3 0 1G 0 part Mount USB driver and copy directory. mkdir -p /mnt/usb mount /dev/sda1 /mnt/usb cp -r /mnt/usb/* ~/ Move kernel configuration file to /etc/sysctl.d . mv ~/60_cyclonedds.conf /etc/sysctl.d Update kernel parameters. sysctl -p /etc/sysctl.d/60_cyclonedds.conf","title":"Copy files from USB drive to AVA platform"},{"location":"start-guide/installation/system-setup-ava/#modify-cycloneddsxml","text":"You need to change the element NetworkInterfaceAddress to the network interface currently in use. Find network interface. ip addr 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enP4p4s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:11:22:33:44:55 brd ff:ff:ff:ff:ff:ff inet 192.168.10.27/24 brd 192.168.10.255 scope global dynamic enP4p4s0 valid_lft 332sec preferred_lft 332sec inet 192.168.10.13/24 brd 192.168.10.255 scope global secondary dynamic noprefixroute enP4p4s0 valid_lft 337sec preferred_lft 262sec inet6 fe80::34c:b6f7:b356:b7/64 scope link valid_lft forever preferred_lft forever inet6 fe80::230:64ff:fe1a:a65/64 scope link valid_lft forever preferred_lft forever 3: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default link/ether aa:bb:cc:dd:ee:ff brd ff:ff:ff:ff:ff:ff inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0 valid_lft forever preferred_lft forever :speech_balloon: You can find a network interface such as enP4p4s0 . Change the NetworkInterfaceAddress . vi ~/cyclonedds/cyclonedds.xml For example; :page_facing_up: cyclonedds.xml <General> - <NetworkInterfaceAddress>lo</NetworkInterfaceAddress> + <NetworkInterfaceAddress>enP4p4s0</NetworkInterfaceAddress> </General>","title":"Modify cyclonedds.xml"},{"location":"start-guide/installation/system-setup-host/","text":"System Setup on your host # Overview # This instruction explains how to perform system setup for test execution on your host. You need to copy docker images and necessary files, and checkout Autoware.Auto. Copy scenario simulator image to your host machine # The docker image of scenario simulator is registered in docker hub . Copy docker image to your host machine. docker pull tier4/scenario_simulator_v2:open_ad_kit-amd64-foxy Copy necessary files to your host machine # Copy scenario files for scenario simulator. Files are placed in the directory :file_folder: docs/Appendix/Open-AD-Kit-Start-Guide/scenario [Currently placed] :page_facing_up: UC-001-0001-Kashiwa:2 :page_facing_up: UC-001-0018-Kashiwa:1 Copy the scenario files to your home directory as the following directory structure. Copy configuration file of Cyclone DDS . You also need to copy cyclonedds.xml to your home directory. Copy kernel configuration file to /etc/sysctl.d . You also need to copy 60_cyclonedds.conf to /etc/sysctl.d directory in your host as well. cp 60_cyclonedds.conf /etc/sysctl.d Update kernel parameters. sysctl -p /etc/sysctl.d/60_cyclonedds.conf Modify cyclonedds.xml # You need to change the element NetworkInterfaceAddress to the network interface currently in use. Find network interface. ip addr 1: lo: <LOOPBACK,MULTICAST,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp0s31f6: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 66:77:88:99:aa:bb brd ff:ff:ff:ff:ff:ff inet 192.168.10.1/24 brd 192.168.10.255 scope global noprefixroute enp0s31f6 valid_lft forever preferred_lft forever inet6 fe80::f15d:4196:b777:6875/64 scope link noprefixroute valid_lft forever preferred_lft forever 3: wlp82s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000 link/ether cc:dd:ee:ff:00:01 brd ff:ff:ff:ff:ff:ff inet 192.168.0.28/24 brd 192.168.0.255 scope global dynamic noprefixroute wlp82s0 valid_lft 3137sec preferred_lft 3137sec inet6 fe80::f493:f223:dfcc:bd1b/64 scope link noprefixroute valid_lft forever preferred_lft forever 4: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default link/ether 23:45:67:89:ab:cd brd ff:ff:ff:ff:ff:ff inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0 valid_lft forever preferred_lft forever :speech_balloon: You can find a network interface such as enp0s31f6 . Change the NetworkInterfaceAddress . vi ~/cyclonedds/cyclonedds.xml For example; :page_facing_up: cyclonedds.xml <General> - <NetworkInterfaceAddress>lo</NetworkInterfaceAddress> + <NetworkInterfaceAddress>enp0s31f6</NetworkInterfaceAddress> </General> Setup ADE # In general, Autoware.Auto runs by using the Agile Development Environment (ADE), so we need to install ADE. In this test, we use launch file placed in Autoware.Auto to run visualization quickly and easily. Install ADE on AVA platform by following the instructions; Installation \u2014 ADE 4.4.0dev documentation Download and setup ADE. wget https://gitlab.com/ApexAI/ade-cli/-/jobs/1341322852/artifacts/raw/dist/ade+aarch64 -O ade chmod +x ade mv ade /usr/bin/ Setup ADE home directory by following the instructions; Installation with ADE mkdir -p ~/adehome cd ~/adehome touch .adehome Checkout Autoware.Auto # Get Autoware.Auto on your host. cd ~/adehome git clone https://gitlab.com/autowarefoundation/autoware.auto/AutowareAuto.git","title":"System Setup on your host"},{"location":"start-guide/installation/system-setup-host/#system-setup-on-your-host","text":"","title":"System Setup on your host"},{"location":"start-guide/installation/system-setup-host/#overview","text":"This instruction explains how to perform system setup for test execution on your host. You need to copy docker images and necessary files, and checkout Autoware.Auto.","title":"Overview"},{"location":"start-guide/installation/system-setup-host/#copy-scenario-simulator-image-to-your-host-machine","text":"The docker image of scenario simulator is registered in docker hub . Copy docker image to your host machine. docker pull tier4/scenario_simulator_v2:open_ad_kit-amd64-foxy","title":"Copy scenario simulator image to your host machine"},{"location":"start-guide/installation/system-setup-host/#copy-necessary-files-to-your-host-machine","text":"Copy scenario files for scenario simulator. Files are placed in the directory :file_folder: docs/Appendix/Open-AD-Kit-Start-Guide/scenario [Currently placed] :page_facing_up: UC-001-0001-Kashiwa:2 :page_facing_up: UC-001-0018-Kashiwa:1 Copy the scenario files to your home directory as the following directory structure. Copy configuration file of Cyclone DDS . You also need to copy cyclonedds.xml to your home directory. Copy kernel configuration file to /etc/sysctl.d . You also need to copy 60_cyclonedds.conf to /etc/sysctl.d directory in your host as well. cp 60_cyclonedds.conf /etc/sysctl.d Update kernel parameters. sysctl -p /etc/sysctl.d/60_cyclonedds.conf","title":"Copy necessary files to your host machine"},{"location":"start-guide/installation/system-setup-host/#modify-cycloneddsxml","text":"You need to change the element NetworkInterfaceAddress to the network interface currently in use. Find network interface. ip addr 1: lo: <LOOPBACK,MULTICAST,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp0s31f6: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 66:77:88:99:aa:bb brd ff:ff:ff:ff:ff:ff inet 192.168.10.1/24 brd 192.168.10.255 scope global noprefixroute enp0s31f6 valid_lft forever preferred_lft forever inet6 fe80::f15d:4196:b777:6875/64 scope link noprefixroute valid_lft forever preferred_lft forever 3: wlp82s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000 link/ether cc:dd:ee:ff:00:01 brd ff:ff:ff:ff:ff:ff inet 192.168.0.28/24 brd 192.168.0.255 scope global dynamic noprefixroute wlp82s0 valid_lft 3137sec preferred_lft 3137sec inet6 fe80::f493:f223:dfcc:bd1b/64 scope link noprefixroute valid_lft forever preferred_lft forever 4: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default link/ether 23:45:67:89:ab:cd brd ff:ff:ff:ff:ff:ff inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0 valid_lft forever preferred_lft forever :speech_balloon: You can find a network interface such as enp0s31f6 . Change the NetworkInterfaceAddress . vi ~/cyclonedds/cyclonedds.xml For example; :page_facing_up: cyclonedds.xml <General> - <NetworkInterfaceAddress>lo</NetworkInterfaceAddress> + <NetworkInterfaceAddress>enp0s31f6</NetworkInterfaceAddress> </General>","title":"Modify cyclonedds.xml"},{"location":"start-guide/installation/system-setup-host/#setup-ade","text":"In general, Autoware.Auto runs by using the Agile Development Environment (ADE), so we need to install ADE. In this test, we use launch file placed in Autoware.Auto to run visualization quickly and easily. Install ADE on AVA platform by following the instructions; Installation \u2014 ADE 4.4.0dev documentation Download and setup ADE. wget https://gitlab.com/ApexAI/ade-cli/-/jobs/1341322852/artifacts/raw/dist/ade+aarch64 -O ade chmod +x ade mv ade /usr/bin/ Setup ADE home directory by following the instructions; Installation with ADE mkdir -p ~/adehome cd ~/adehome touch .adehome","title":"Setup ADE"},{"location":"start-guide/installation/system-setup-host/#checkout-autowareauto","text":"Get Autoware.Auto on your host. cd ~/adehome git clone https://gitlab.com/autowarefoundation/autoware.auto/AutowareAuto.git","title":"Checkout Autoware.Auto"},{"location":"start-guide/installation/system-setup-pcu/","text":"System Setup on PCU # Overview # This instruction explains how to perform system setup for test execution on PCU. You need to install Docker Engine, copy docker images and necessary files. Access to PCU via SSH # ssh user@IP-ADDRESS For example; ssh user@192.168.10.221 Copy Autoware.Auto image to PCU # NOTE : docker should be installed with post-installation steps. For instructions please refer to: Install Docker Engine on Ubuntu . Post-installation steps for Linux . The docker image of Autoware.Auto is registered in GitLab Container Registry . Copy docker image to PCU. docker pull registry.gitlab.com/autowarefoundation/autoware.auto/autowareauto/arm64/openadkit-foxy:latest Copy necessary files to local Downloads folder # Copy files related to map contents . Files are placed in the directory :file_folder: docs/Appendix/Open-AD-Kit-Start-Guide/map :page_facing_up: lanelet2_map.osm :page_facing_up: pointcloud_map.pcd :page_facing_up: global_map_center.pcd.yaml :page_facing_up: lanelet2_map_provider.osm.yaml :page_facing_up: map.map_publisher.yaml Copy files to your local folder (Downloads folder as example) as the following directory structure. Copy configuration file of Cyclone DDS . In this test, we are using Cyclone DDS, so you also need to copy configuration file of Cyclone DDS. File is placed in the directory :file_folder: docs/Appendix/Open-AD-Kit-Start-Guide/cyclonedds :page_facing_up: cyclonedds.xml Copy the file to your local folder as the following directory structure. Copy kernel configuration file for tuning kernel parameters. We have to reconfigure kernel parameters by using sysctl for system stability. File is placed in the directory :file_folder: docs/Appendix/Open-AD-Kit-Start-Guide/sysctl.d :page_facing_up: 60_cyclonedds.conf Copy the file to your local folder. Copy files from local folder to PCU # Connect your host PC with PCU through internet and copy files with SCP. Access to PCU via SSH For example; ssh user@192.168.10.221 Copy kernel configuration file to /etc/sysctl.d/ sudo scp USER-NAME@IP-ADDRESS:/home/USER-NAME/Downloads/60_cyclonedds.conf /etc/sysctl.d/ For example; sudo scp adlink@192.168.10.237:/home/adlink/Downloads/60_cyclonedds.conf /etc/sysctl.d/ Then type in the password of PCU (default password: user) and host PC as request. Update kernel parameters. sudo sysctl -p /etc/sysctl.d/60_cyclonedds.conf Copy map contents files and Cyclone DDS configuration file. sudo scp -r USER-NAME@IP-ADDRESS:/home/adlink/Downloads/map ~/ sudo scp -r USER-NAME@IP-ADDRESS:/home/adlink/Downloads/cyclonedds ~/ Modify cyclonedds.xml # You need to change the element NetworkInterfaceAddress to the network interface currently in use. Find network interface. ip addr 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: fm1-mac1: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq master br0 state DOWN group default qlen 1000 link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff inet6 fe80::204:7cff:fe2e:190/64 scope link valid_lft forever preferred_lft forever 3: fm1-mac5: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:04:7c:2e:01:91 brd ff:ff:ff:ff:ff:ff inet 192.168.10.221/24 brd 192.168.10.255 scope global dynamic fm1-mac5 valid_lft 254392sec preferred_lft 254392sec inet6 fe80::204:7cff:fe2e:191/64 scope link valid_lft forever preferred_lft forever 4: fm1-mac6: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq master br0 state DOWN group default qlen 1000 link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff 5: fm1-sw: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq master br0 state UP group default qlen 1000 link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff inet6 fe80::204:7cff:fe2e:190/64 scope link alid_lft forever preferred_lft forever 6: fm1-mac10: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq master br0 state DOWN group default qlen 1000 link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff 7: sit0@NONE: <NOARP> mtu 1480 qdisc noop state DOWN group default qlen 1000 link/sit 0.0.0.0 brd 0.0.0.0 8: br0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000 link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff inet 192.168.1.239/24 brd 192.168.1.255 scope global br0 valid_lft forever preferred_lft forever inet6 fe80::204:7cff:fe2e:190/64 scope link valid_lft forever preferred_lft forever 9: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default link/ether 02:42:cb:aa:a6:9d brd ff:ff:ff:ff:ff:ff inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0 valid_lft forever preferred_lft forever :speech_balloon: You can find a network interface such as fm1-mac5 . Change the NetworkInterfaceAddress . sudo vi ~/cyclonedds/cyclonedds.xml For example; :page_facing_up: cyclonedds.xml <General> - <NetworkInterfaceAddress>lo</NetworkInterfaceAddress> + <NetworkInterfaceAddress>fm1-mac5</NetworkInterfaceAddress> </General>","title":"System Setup on PCU"},{"location":"start-guide/installation/system-setup-pcu/#system-setup-on-pcu","text":"","title":"System Setup on PCU"},{"location":"start-guide/installation/system-setup-pcu/#overview","text":"This instruction explains how to perform system setup for test execution on PCU. You need to install Docker Engine, copy docker images and necessary files.","title":"Overview"},{"location":"start-guide/installation/system-setup-pcu/#access-to-pcu-via-ssh","text":"ssh user@IP-ADDRESS For example; ssh user@192.168.10.221","title":"Access to PCU via SSH"},{"location":"start-guide/installation/system-setup-pcu/#copy-autowareauto-image-to-pcu","text":"NOTE : docker should be installed with post-installation steps. For instructions please refer to: Install Docker Engine on Ubuntu . Post-installation steps for Linux . The docker image of Autoware.Auto is registered in GitLab Container Registry . Copy docker image to PCU. docker pull registry.gitlab.com/autowarefoundation/autoware.auto/autowareauto/arm64/openadkit-foxy:latest","title":"Copy Autoware.Auto image to PCU"},{"location":"start-guide/installation/system-setup-pcu/#copy-necessary-files-to-local-downloads-folder","text":"Copy files related to map contents . Files are placed in the directory :file_folder: docs/Appendix/Open-AD-Kit-Start-Guide/map :page_facing_up: lanelet2_map.osm :page_facing_up: pointcloud_map.pcd :page_facing_up: global_map_center.pcd.yaml :page_facing_up: lanelet2_map_provider.osm.yaml :page_facing_up: map.map_publisher.yaml Copy files to your local folder (Downloads folder as example) as the following directory structure. Copy configuration file of Cyclone DDS . In this test, we are using Cyclone DDS, so you also need to copy configuration file of Cyclone DDS. File is placed in the directory :file_folder: docs/Appendix/Open-AD-Kit-Start-Guide/cyclonedds :page_facing_up: cyclonedds.xml Copy the file to your local folder as the following directory structure. Copy kernel configuration file for tuning kernel parameters. We have to reconfigure kernel parameters by using sysctl for system stability. File is placed in the directory :file_folder: docs/Appendix/Open-AD-Kit-Start-Guide/sysctl.d :page_facing_up: 60_cyclonedds.conf Copy the file to your local folder.","title":"Copy necessary files to local Downloads folder"},{"location":"start-guide/installation/system-setup-pcu/#copy-files-from-local-folder-to-pcu","text":"Connect your host PC with PCU through internet and copy files with SCP. Access to PCU via SSH For example; ssh user@192.168.10.221 Copy kernel configuration file to /etc/sysctl.d/ sudo scp USER-NAME@IP-ADDRESS:/home/USER-NAME/Downloads/60_cyclonedds.conf /etc/sysctl.d/ For example; sudo scp adlink@192.168.10.237:/home/adlink/Downloads/60_cyclonedds.conf /etc/sysctl.d/ Then type in the password of PCU (default password: user) and host PC as request. Update kernel parameters. sudo sysctl -p /etc/sysctl.d/60_cyclonedds.conf Copy map contents files and Cyclone DDS configuration file. sudo scp -r USER-NAME@IP-ADDRESS:/home/adlink/Downloads/map ~/ sudo scp -r USER-NAME@IP-ADDRESS:/home/adlink/Downloads/cyclonedds ~/","title":"Copy files from local folder to PCU"},{"location":"start-guide/installation/system-setup-pcu/#modify-cycloneddsxml","text":"You need to change the element NetworkInterfaceAddress to the network interface currently in use. Find network interface. ip addr 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: fm1-mac1: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq master br0 state DOWN group default qlen 1000 link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff inet6 fe80::204:7cff:fe2e:190/64 scope link valid_lft forever preferred_lft forever 3: fm1-mac5: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:04:7c:2e:01:91 brd ff:ff:ff:ff:ff:ff inet 192.168.10.221/24 brd 192.168.10.255 scope global dynamic fm1-mac5 valid_lft 254392sec preferred_lft 254392sec inet6 fe80::204:7cff:fe2e:191/64 scope link valid_lft forever preferred_lft forever 4: fm1-mac6: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq master br0 state DOWN group default qlen 1000 link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff 5: fm1-sw: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq master br0 state UP group default qlen 1000 link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff inet6 fe80::204:7cff:fe2e:190/64 scope link alid_lft forever preferred_lft forever 6: fm1-mac10: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq master br0 state DOWN group default qlen 1000 link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff 7: sit0@NONE: <NOARP> mtu 1480 qdisc noop state DOWN group default qlen 1000 link/sit 0.0.0.0 brd 0.0.0.0 8: br0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000 link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff inet 192.168.1.239/24 brd 192.168.1.255 scope global br0 valid_lft forever preferred_lft forever inet6 fe80::204:7cff:fe2e:190/64 scope link valid_lft forever preferred_lft forever 9: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default link/ether 02:42:cb:aa:a6:9d brd ff:ff:ff:ff:ff:ff inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0 valid_lft forever preferred_lft forever :speech_balloon: You can find a network interface such as fm1-mac5 . Change the NetworkInterfaceAddress . sudo vi ~/cyclonedds/cyclonedds.xml For example; :page_facing_up: cyclonedds.xml <General> - <NetworkInterfaceAddress>lo</NetworkInterfaceAddress> + <NetworkInterfaceAddress>fm1-mac5</NetworkInterfaceAddress> </General>","title":"Modify cyclonedds.xml"},{"location":"start-guide/installation/images/boot-ewaol/","text":"","title":"Index"},{"location":"system-configuration/","text":"Application example # TODO","title":"Application example"},{"location":"system-configuration/#application-example","text":"TODO","title":"Application example"}]}