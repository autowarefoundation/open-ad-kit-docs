{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Open AD Kit Documentation","text":"<p>The latest version is 2.0, but it has not been officially released yet.</p>"},{"location":"#about-open-ad-kit","title":"About Open AD Kit","text":"<p>Open AD Kit aims to democratize autonomous drive (AD) systems by bringing the cloud and edge closer together. In doing so, Open AD Kit will lower the threshold for developing and deploying the Autoware software stack.</p> <p></p> <p>For more details about the Open AD Kit project, its goals and details of the Autoware Foundation working group that oversees the project, refer to the Open AD Kit Working Group wiki.</p>"},{"location":"#open-ad-kit-documentation-structure","title":"Open AD Kit documentation structure","text":""},{"location":"#getting-started","title":"Getting started","text":"<ul> <li>Start guide describes how to install, set up and run Autoware and its associated simulators on supported development platforms.</li> <li>System configuration describes the components that make up Open AD Kit in terms of the required hardware and software.</li> <li>Application example provides an actual application example for Open AD Kit that can be used as a reference for the development of other applications.</li> </ul>"},{"location":"#releases","title":"Releases","text":"<p>version 2.0 Latest</p> <p>version 1.0</p>"},{"location":"version-1.0/","title":"Open AD Kit Documentation","text":"<p>The latest version is 2.0, but it has not been officially released yet.</p>"},{"location":"version-1.0/#about-open-ad-kit","title":"About Open AD Kit","text":"<p>Open AD Kit aims to democratize autonomous drive (AD) systems by bringing the cloud and edge closer together. In doing so, Open AD Kit will lower the threshold for developing and deploying the Autoware software stack.</p> <p></p> <p>For more details about the Open AD Kit project, its goals and details of the Autoware Foundation working group that oversees the project, refer to the Open AD Kit Working Group wiki.</p>"},{"location":"version-1.0/#open-ad-kit-documentation-structure","title":"Open AD Kit documentation structure","text":""},{"location":"version-1.0/#getting-started","title":"Getting started","text":"<ul> <li>Start guide describes how to install, set up and run Autoware and its associated simulators on supported development platforms.</li> <li>System configuration describes the components that make up Open AD Kit in terms of the required hardware and software.</li> <li>Application example provides an actual application example for Open AD Kit that can be used as a reference for the development of other applications.</li> </ul>"},{"location":"version-1.0/application-example/","title":"Application example","text":"<p>There is no application example of Open AD Kit version 1.0.</p>"},{"location":"version-1.0/application-example/driverless-bus/","title":"Driverless bus","text":"<p>The content is a work in progress.</p> <p>This page provides a reference design for a passenger transportation system in the urban area. The reference design consists of the following structures:</p> <ol> <li>Introduction of Reference Design</li> <li>Concept of Operations</li> <li>Operational Concept</li> <li>Operational Environment Requirements</li> <li>System Requirements</li> <li>System Configuration</li> <li>Hardware Requirements</li> <li>Software Requirements</li> <li>Appendix</li> </ol>"},{"location":"version-1.0/application-example/driverless-bus/appendix/","title":"Appendix","text":"<p>The content is a work in progress.</p> <ul> <li>What is ConOps and OpsCons?</li> <li>Hardware List</li> </ul>"},{"location":"version-1.0/application-example/driverless-bus/appendix/hardware-list/","title":"Hardware List","text":"<p>The content is a work in progress.</p> <p>This page should show applicable hardwares for the system.</p>"},{"location":"version-1.0/application-example/driverless-bus/appendix/what-is-conops-and-opscon/","title":"What is ConOps and OpsCons?","text":"<p>Concept of Operations (ConOps): \u201c... the ConOps describes the overall high-level concept of how the system will be used to meet stakeholder expectations, usually in a time-sequenced manner\u2026\u201d, source NASA Systems Engineering Handbook</p> <p>In short, it describes how the system achieves the user\u2019s mission with a picture and short sentences.</p> <p>Operational Concept (OpsCon): \u201cThe operational concept is designed to give an overall picture of the operations using one or more specific systems, or set of related systems, in the organization\u2019s operational environment from the users\u2019 and operators\u2019 perspective.\u201d, source SEBoK</p> <p>In short, it describes:</p> <ul> <li>How the system achieves the mission using unique features/events/interactions</li> <li>Relationships between the system and other systems</li> </ul> <p>Benefits:</p> <ul> <li>Stakeholders can understand the system from the early stages of development</li> <li>In particular, developers who have different backgrounds or perspectives can gain the same understanding</li> </ul>"},{"location":"version-1.0/application-example/driverless-bus/concept-of-operations/","title":"Concept of Operations","text":""},{"location":"version-1.0/application-example/driverless-bus/concept-of-operations/#passenger-transportation-system-in-the-urban-area","title":"Passenger Transportation System in the urban area","text":"<p>The system, under the surveillance of an in-car operator, will automatically transport passengers while following routes on public roads. The public roads have multiple lanes, traffic lights, and intersections; therefore the system will automatically change lanes and respond to traffic lights at intersections. The system will automatically stop at bus stops. The system is programmed to avoid colliding with objects that are detected on the road. The vehicle is programmed to either safely pass the object when possible, or to stop. While the vehicle is moving, the system automatically maintains a safe following distance and stays within the speed limit (i.e., adaptive cruise control).</p> <p></p>"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/","title":"Hardware Requirements","text":"<p>The content is a work in progress.</p> <ol> <li>Vehicle Requirements</li> <li>ECU Requirements</li> <li>Sensor Requirements</li> </ol> <ul> <li>LiDAR Requirements</li> <li>Camera Requirements</li> <li>Radar Requirements</li> </ul>"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/","title":"ECU Requirements","text":"<p>This is a draft version.</p>"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/#overview","title":"Overview","text":"<p>The requirements described in the following pages are determined based on a Tier IV project as a reference for now. This will be updated once the requirements for Open AD Kit was determined.</p>"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/#table-of-contents","title":"Table of contents","text":"<ol> <li>High-level Architecture</li> <li>System Resource &amp; Interface</li> <li>Performance and Data Bandwidth Requirements</li> <li>Hardware Requirements</li> </ol>"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/high-level-arch/","title":"High-level Architecture","text":"<p>This is a draft version.</p>"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/high-level-arch/#overview","title":"Overview","text":"<p>The reference system consists of three parts of computing unit.</p> <ul> <li>Main Autoware</li> <li>2D Perception</li> <li>Traffic Light Recognition</li> </ul> <p>Each unit can be implemented on separated hardware units (ECUs) and, if the hardware has sufficient system resource and performance, some units can also be integrated on a single hardware unit.</p>"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/high-level-arch/#block-diagram","title":"Block Diagram","text":""},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/hw-requirements/","title":"Hardware Requirements","text":"<p>This is a draft version.</p>"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/hw-requirements/#overview","title":"Overview","text":"<p>This page describes sample requirements for hardware specification.</p> <p>NOTE: This type of hardware requirement should be differed depending on a target vehicle and changed by the industrial standard. It also needs to be determined during hardware design so might should be a part of the reference implementation.</p>"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/hw-requirements/#reliability","title":"Reliability","text":"Item Requirement Standard AEC-Q100"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/hw-requirements/#environmental","title":"Environmental","text":"Item Requirement Operating Temp e.g. -40 to 130 degree celsius Storage Temp Humidity Vibration Shock EMC"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/hw-requirements/#mechanical","title":"Mechanical","text":"Item Requirement Dimensions Weight Mounting"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/hw-requirements/#power","title":"Power","text":"Item Requirement AC/DC input supply e.g. shall input 350V DC Power Consumption e.g. shall be less 600W"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/hw-requirements/#cooling","title":"Cooling","text":"Item Requirement Liquid cooling"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/perf-data-bandwidth/","title":"Performance and Data Bandwidth Requirements","text":"<p>This is a draft version.</p>"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/perf-data-bandwidth/#overview","title":"Overview","text":"<p>This page describes required performance for the perception accelerators and data bandwidth on each sensor interface and network.</p>"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/perf-data-bandwidth/#perception-accelerators","title":"Perception Accelerators","text":"Functions Network Model Input resolution @ frame rate Required performance 3D Perception CenterPoint 55000 voxels x 20 points x 10features @10FPS per LiDAR XX TOPS 2D Perception Yolov4 608x608@10FPS per Camera XX TOPS Traffic Light Recognition MobileNet v2 SSD Lite (Detection)MobileNet v2 (Classification) 300x300@10FPS224x224@10FPS XX TOPS"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/perf-data-bandwidth/#data-bandwidth","title":"Data Bandwidth","text":"Type Configurations Data type Data Bandwidth LiDAR Input Mid-range Point cloud 37 Mbps Short-range Point cloud 26 Mbps Camera Input Perception Camera YUV422 16bit1920x1280 393 Mbps Traffic Light Recognition Camera YUV422 16bit2880x1860 857 Mbps Inter-ECU 2D Perception to Main Autoware Recognition result &amp;Compressed image data for logging 27 Mbps TLR to Main Autoware Recognition result &amp;Compressed image data for logging 59 Mbps Logging Storage Mid-range LiDAR x 4Short-range LiDAR x 4Perception Camera x 6 (Compressed)Traffic Light Recognition Camera x 1 (Compressed)Main Autoware internat topics (272Mbps) 745 Mbps"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/sys-resource-if/","title":"System Resource &amp; Interface","text":"<p>This is a draft version.</p>"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/sys-resource-if/#overview","title":"Overview","text":"<p>The following tables describe the required system resource and interface for each computing unit.</p>"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/sys-resource-if/#main-autoware-unit","title":"Main Autoware Unit","text":"Category Item Requirement Computing Resource CPU X86 8core/16thread @3.3GHz or more Memory Dual 16GB (Total 32GB), DDR4-2666 w/ ECC or more GPU 9.4 TFLOPS@FP32 or more Storage 256GB for System Volume2TB for Logging data LiDAR 100BASE-TX, 1000BASE-T Interfaces IMU CAN or RS232C GNSS 100BASE-TX Vehicle CAN Inter-ECU (2D Perception/TLR) 1000BASE-T Power CPU TDP 80 W GPU TDP 110 W Total Max 250 W"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/sys-resource-if/#2d-perception-unit","title":"2D Perception Unit","text":"<p>This table shows requirements for one camera. For multiple camera configurations, it requires more hardware units. If the hardware unit has sufficient system resource and performance, it can be integrated on a single hardware unit.</p> Category Item Requirement Computing Resource CPU Arm v8.2 8core @2.26GHz or more Memory 32GB Low-Power Double Data Rate 4x or more GPU 30 TOPS or more Storage 32GB or more Interfaces Camera Gigabit Multimedia Serial Link 2 w/ frame sync trigger or 1000BASE-T (GigE Vision) Inter-ECU (Main Autoware) 1000BASE-T Power CPU TDP xxxW GPU TDP xxxW Total Max.xxxW"},{"location":"version-1.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/sys-resource-if/#traffic-light-recognition-unit","title":"Traffic Light Recognition Unit","text":"<p>This table shows requirements for one camera. For multiple camera configurations, it requires more hardware units. If the hardware unit has sufficient system resource and performance, it can be integrated on a single hardware unit.</p> Category Item Requirement Computing Resource CPU Arm v8.2 8core @2.26GHz or more Memory 32GB Low-Power Double Data Rate 4x or more GPU 30 TOPS or more Storage 32GB or more Interfaces Camera Gigabit Multimedia Serial Link 2 w/ frame sync trigger or 1000BASE-T (GigE Vision) Inter-ECU (Main Autoware) 1000BASE-T Power CPU TDP xxxW GPU TDP xxxW Total Max.xxxW"},{"location":"version-1.0/application-example/driverless-bus/introduction-of-reference-design/","title":"Introduction of Reference Design","text":""},{"location":"version-1.0/application-example/driverless-bus/introduction-of-reference-design/#introduction","title":"Introduction","text":""},{"location":"version-1.0/application-example/driverless-bus/introduction-of-reference-design/#autonomous-driving-technology","title":"Autonomous driving technology","text":"<p>AWF aims to establish a sustainable ecosystem for autonomous driving to which various organizations and individuals can contribute in terms of development, and wherein society can enjoy the benefits. AWF offers open access to technologies contributing to autonomous driving.</p> <p>Autonomous driving requires a composite platform which integrates various software, cloud infrastructure and services in addition to the in-vehicle AD ( Autonomous Driving ) systems. There is a need for a horizontally collaborative development approach based on an open source platform that ensures a level of safety that satisfies society at a reasonable cost. In order to realize this, AWF is promoting (1) Autoware, an open source autonomous driving software, (2) AD System Reference Designs based on ODD ( Operational Design Domain \uff09categorization, and (3) Deep-tech R&amp;D of AD systems.</p>"},{"location":"version-1.0/application-example/driverless-bus/introduction-of-reference-design/#what-can-do-with-reference-design-as-ecosystem","title":"What can do with \"Reference Design\" as ecosystem?","text":"<p>With clear ODD classifications, everyone can understand where AD fits into complex real-world traffic environments. By presenting a suitable \"Reference Design\" for each ODD, AWF simplifies the preparation process in AD and lowers the difficulty threshold for demonstration and implementation.</p>"},{"location":"version-1.0/application-example/driverless-bus/operational-concept/","title":"Operational Concept","text":"<p>Operational Concept (OpsCon) of the Passenger Transportation System in the urban area is below:</p> <ol> <li>Daytime operation</li> <li>Nighttime operation</li> <li>Follow a route</li> <li>Let passengers on and off at bus stops</li> <li>Avoid collisions</li> <li>Set service route via HMI on the vehicle</li> <li>Interact with other vehicles on the public roads</li> <li>Interact with emergency vehicles</li> <li>Interact with traffic lights</li> <li>Operation mode</li> <li>Take over request to the operator</li> <li>Lane keeping and changing lanes</li> <li>Adaptive cruise control</li> <li>Predict pedestrian stepping into the road</li> </ol>"},{"location":"version-1.0/application-example/driverless-bus/operational-concept/adaptive-cruise-control/","title":"Adaptive cruise control","text":"<p>The system automatically maintains a safe following distance and stays within the speed limit.</p> <p></p>"},{"location":"version-1.0/application-example/driverless-bus/operational-concept/avoid-collisions/","title":"Avoid collisions","text":"<p>When there are objects on the route, the system will automatically perform the following actions:</p> <p>a. The system automatically stops if there is surrounding traffic.</p> <p>b. The system automatically avoids the objects if there is no surrounding traffic.</p> <p></p>"},{"location":"version-1.0/application-example/driverless-bus/operational-concept/daytime-operation/","title":"Daytime operation","text":"<p>Currently, the system does NOT operate in the daytime.</p> <p>In the future, the system will be able to operate during the daytime (9:30am - 3:30pm).</p> <p>The vehicle will be fully charged before the operation in the daytime.</p> <p></p>  The operator connects the charger to the vehicle, and the vehicle is automatically charged."},{"location":"version-1.0/application-example/driverless-bus/operational-concept/follow-a-route/","title":"Follow a route","text":"<p>The system follows a route set on the public road while an in-car operator is in the autonomous driving vehicle of the system.</p> <p></p>"},{"location":"version-1.0/application-example/driverless-bus/operational-concept/interact-with-emergency-vehicles/","title":"Interact with emergency vehicles","text":"<p>When the vehicle meets an emergency vehicle, an in-car operator performs the following actions:</p> <ul> <li>Promptly maneuvers the vehicle to the side of the road and stops</li> <li>Manually re-launches the system after the emergency vehicle passes by</li> <li>NOTE: The operator can use HMI (e.g., steering wheel or brake pedal) at any time to override the system control.</li> </ul> <p></p>"},{"location":"version-1.0/application-example/driverless-bus/operational-concept/interact-with-other-vehicle-on-the-public-roads/","title":"Interact with other vehicles on the public roads","text":"<p>The service route uses public roads, so the system interacts with other vehicles and must obey all traffic laws.</p> <p>When the vehicle approaches an intersection, the system is programed to yield and take right of way with surrounding traffic, depending the actual situation and traffic laws.</p> <p></p>"},{"location":"version-1.0/application-example/driverless-bus/operational-concept/interact-with-traffic-lights/","title":"Interact with traffic lights","text":"<p>When the vehicle meets a traffic light, the system performs one of the following actions:</p> <ul> <li>Stop on a red light</li> <li>Stop on a yellow light</li> <li>Go straight, turn right, or turn left on a green light or arrow</li> </ul> <p></p>"},{"location":"version-1.0/application-example/driverless-bus/operational-concept/lane-keeping-and-changing-lanes/","title":"Lane keeping and changing lanes","text":"<p>The system stays the driving lane or changes lanes according to the route.</p> <p></p>"},{"location":"version-1.0/application-example/driverless-bus/operational-concept/let-passengers-on-and-off-at-bus-stops/","title":"Let passengers on and off at bus stops","text":"<p>The system stops at bus stops set by the in-car operator.</p> <p>The in-car operator manually opens and closes the door of the vehicle to let passengers on and off at bus stops due to the local government\u2019s request.</p> <p>After the in-car operator requests the system to depart, the system automatically resumes driving along the route.</p> <p></p>"},{"location":"version-1.0/application-example/driverless-bus/operational-concept/nighttime-operation/","title":"Nighttime operation","text":"<p>During the nighttime (10pm - 1am), an in-car operator drives the vehicle from a parking lot to a start position and manually launches the autonomous driving system via HMI in the vehicle.</p> <p>The system starts moving automatically on a route set by the in-car operator.</p> <p>The in-car operator is while the system automatically operates.</p> <p></p>"},{"location":"version-1.0/application-example/driverless-bus/operational-concept/operation-mode/","title":"Operation mode: Automatic/Manual","text":"<p>The in-car operator manually launches the autonomous driving system, which causes the system to start the autonomous driving.</p> <p>If the fail safe system in the vehicle detects malfunctions or the in-car operator presses the button on the fail safe system, the system automatically changes the operation mode from automatic to manual. Then the vehicle automatically stops.</p>"},{"location":"version-1.0/application-example/driverless-bus/operational-concept/predict-pedestrian-stepping-into-the-road/","title":"Predict pedestrian stepping into the road","text":"<p>The vehicle is programmed to detect pedestrians who may step into the road, and the vehicle decelerates in response.</p> <p></p>"},{"location":"version-1.0/application-example/driverless-bus/operational-concept/set-service-route-via-HMI-on-the-vehicle/","title":"Set service route via HMI on the vehicle","text":"<p>The operator can set authorized service routes of the system via the Human Machine Interface (HMI) on the vehicle before the operation.</p> <p>The system can only accept a modified route while the vehicle is parked.</p> <p>NOTE: the service route cannot be changed without the authorization from the local government.</p>"},{"location":"version-1.0/application-example/driverless-bus/operational-concept/take-over-request-to-the-operator/","title":"Take over request to the operator","text":"<p>When the system cannot judge whether it can move forward, the system sends a recommendation to hand over operation to the in-car operator.</p> <p>The operator is supposed to perform the following actions when requested by the system:</p> <ul> <li>Request to depart\uff08refer to Let passengers on and off at bus-stops\uff09</li> <li>Avoid objects</li> <li>Detour</li> </ul> <p></p>"},{"location":"version-1.0/application-example/driverless-bus/operational-environment-requirement/","title":"Operational Environment Requirements","text":"<p>The content is a work in progress.</p>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/","title":"Software Requirements","text":"<p>The content is a work in progress.</p> <ol> <li>Operating System Requirements</li> </ol> <ul> <li>Kernel Module Requirements</li> </ul> <ol> <li>Middleware Requirements</li> </ol> <ul> <li>DDS Requirements</li> </ul> <ol> <li>Map Requirements</li> <li>Design docs of Autoware</li> </ol> <ul> <li>Autoware API</li> <li>Component Architecture</li> <li>Repository Configuration</li> </ul>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/autoware-api/","title":"Autoware API","text":""},{"location":"version-1.0/application-example/driverless-bus/software-requirements/autoware-api/#overview","title":"Overview","text":"<p>Autoware API provides a long-term and stable operation protocol for autonomous driving vehicles, and clarifies how to support new sensors and vehicles and add new features. It also works as a framework for easy access to the functions of each component by developers of other components.</p>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/autoware-api/#concept","title":"Concept","text":"<p>There are two categories of Autoware API. One is Autoware AD API for operating the vehicle from outside the autonomous driving system such as Fleet Management System(FMS) and HMI for operators or passengers. The other is Autoware Component Interfaces for linking each internal component. Some external systems for evaluation or debugging purposes, such as simulator, are allowed access to Component Interfaces in addition to AD API.</p> <p></p>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/autoware-api/#ad-api-customization","title":"AD API Customization","text":"<p>For general usage, Autoware provides the default AD API implementations and configurations using Component Interfaces. If a special behavior is needed, the implementation can be modified as long as it satisfies the requirements of the specification.</p> <p></p>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/autoware-api/#component-interfaces-hierarchy","title":"Component Interfaces Hierarchy","text":"<p>Autoware Component Interfaces have a hierarchical specification. The top-level architecture consists of several components, and each component has some options of the next-level architecture. Developers select one of them when implementing the component. The simplest next-level architecture is monolithic. This is an all-in-one and black box implementation, and is suitable for small group development, prototyping, and extremely complex functions. Others are just concepts and do not currently exist. However, these have advantages for large group development. Developers can combine their modules with other modules that adopt the same architecture.</p> <p></p>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/autoware-api/#interface-code-generation","title":"Interface Code Generation","text":"<p>For specification clarification and development efficiency, it is recommended to use the generated code by the defined interface. Developers may select the interface to use from the specification and refer the generated code in their program. This makes it easy to analyze the interface used by each program, which then can be applied to configuration automation and visualization.</p> <p></p>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/component-architecture/","title":"Component architecture","text":""},{"location":"version-1.0/application-example/driverless-bus/software-requirements/component-architecture/#overview","title":"Overview","text":"<p>The figure below is the overview of Autoware's component configuration (tentative).</p> <p></p>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/component-architecture/#autoware-components","title":"Autoware components","text":"<p>TODO(Tier IV): Write the details based on the following materials.</p> <ul> <li>Autoware.Auto</li> <li>autoware_auto_msgs</li> <li>Tier IV's proposal document</li> <li>Tier IV's proposal implementation</li> </ul>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/component-architecture/#map","title":"Map","text":"<p>Inputs:</p> <ul> <li>Map file<ul> <li>PointCloud map file</li> <li>Vector map file</li> </ul> </li> </ul> <p>Outputs:</p> <ul> <li>Map data<ul> <li>PointCloud map file</li> <li>Vector map file</li> </ul> </li> </ul>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/component-architecture/#sensing","title":"Sensing","text":"<p>Inputs:</p> <ul> <li>Raw sensor data<ul> <li>GNSS</li> <li>IMU</li> <li>Camera</li> <li>LiDAR</li> <li>RADAR</li> </ul> </li> <li>Estimated self motion<ul> <li>To filter distortions</li> </ul> </li> </ul> <p>Outputs:</p> <ul> <li>Preprocessed sensor data<ul> <li>GNSS pose and doppler velocity</li> <li>IMU acceleration and angular velocity</li> <li>Camera image</li> <li>LiDAR PointCloud</li> <li>RADAR reflection</li> </ul> </li> </ul>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/component-architecture/#localization","title":"Localization","text":"<p>Inputs:</p> <ul> <li>Preprocessed sensor data<ul> <li>GNSS pose and doppler velocity</li> <li>IMU acceleration and angular velocity</li> <li>Camera image</li> <li>LiDAR PointCloud</li> <li>RADAR reflection</li> </ul> </li> <li>Map data<ul> <li>PointCloud map</li> <li>Vector map</li> </ul> </li> </ul> <p>Outputs:</p> <ul> <li>Localized self pose<ul> <li>Topic</li> <li>TF</li> </ul> </li> <li>Estimated self motion</li> </ul>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/component-architecture/#perception","title":"Perception","text":"<p>Inputs:</p> <ul> <li>Localized self pose</li> <li>Estimated self motion</li> <li>Preprocessed sensor data<ul> <li>Camera image</li> <li>LiDAR PointCloud</li> <li>RADAR reflection</li> </ul> </li> </ul> <p>Outputs:</p> <ul> <li>Detected dynamic objects</li> <li>Detected traffic lights</li> <li>Filtered obstacle PointCloud</li> </ul>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/component-architecture/#planning","title":"Planning","text":"<p>Inputs:</p> <ul> <li>Localized pose</li> <li>Estimated self motion</li> </ul> <p>Outputs:</p> <ul> <li>Planned trajectory</li> <li>Planning status</li> </ul>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/component-architecture/#control","title":"Control","text":"<p>Inputs:</p> <ul> <li>Localized self pose</li> <li>Estimated self motion</li> <li>Planner trajectory</li> <li>Vehicle sensor data<ul> <li>velocity</li> <li>steering angle</li> </ul> </li> </ul> <p>Outputs:</p> <ul> <li>Control commands<ul> <li>High-level commands for easy usage</li> <li>Low-level commands for detailed controls</li> </ul> </li> </ul>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/component-architecture/#vehicle","title":"Vehicle","text":""},{"location":"version-1.0/application-example/driverless-bus/software-requirements/component-architecture/#autoware-to-vehicle","title":"Autoware to Vehicle","text":"<p>Inputs:</p> <ul> <li>Control commands</li> </ul> <p>Outputs:</p> <ul> <li>Raw vehicle control commands</li> </ul>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/component-architecture/#vehicle-to-autoware","title":"Vehicle to Autoware","text":"<p>Inputs:</p> <ul> <li>Raw vehicle sensor data (e.g. CAN)</li> </ul> <p>Outputs:</p> <ul> <li>Vehicle sensor data (Topic)</li> </ul>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/component-architecture/#system","title":"System","text":"<p>Inputs:</p> <ul> <li>Each component output</li> </ul> <p>Outputs:</p> <ul> <li>System status</li> <li>MRM request</li> </ul>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/design-docs-of-autoware/","title":"Design docs of Autoware","text":"<p>In this section, we'll explain a couple of design documents of Autoware.</p> <p>The first one is about <code>Autoware API</code>. It defines two kinds of APIs for different developers.</p> <ol> <li><code>Autoware AD API</code> for developers of external systems such as fleet management HMI, etc.<ul> <li>AD means Autonomous Driving.</li> </ul> </li> <li><code>Autoware Component Interface</code> for developers of Autoware components such as Localization, Perception, etc.</li> </ol> <p>The second one is about the architecture of Autoware components. It explains the interface between Autoware components in detail.</p> <p>The last one is about the repository configuration of Autoware, which is currently used here. It explains why such a distributed structure is necessary.</p>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/repository-configuration/","title":"Repository configuration","text":""},{"location":"version-1.0/application-example/driverless-bus/software-requirements/repository-configuration/#overview","title":"Overview","text":"<p>This page shows the repository configuration of Autoware and its concepts.</p> <p>Warning</p> <p>Note: This figure is tentative.</p> <p>TODO: Add documentations repositories, WG repositories, and autoware.org.</p> <p></p>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/repository-configuration/#concepts","title":"Concepts","text":""},{"location":"version-1.0/application-example/driverless-bus/software-requirements/repository-configuration/#coreuniverse-architecture","title":"Core/Universe architecture","text":"<p>Since Autoware is desired to be usable for production-level vehicles in the future, Autoware.Auto has been used strict merge criteria.</p> <p>However, since there is no specific requirements or specifications in Autonomous Driving, it's almost impossible to build a perfect product from the beginning. We need prototyping phases to build a high-quality product, so we're doing ODD-based developments.</p> <p>Then, doing every development in one branch causes slowing down of development speed or mixin of low-quality. Also, forcing such a strict rules for all contributors will make them discourage from sending PRs.</p> <p>Therefore, it's better to separate production level and high-quality code and prototyping level code. Specifically, we define Core/Universe for this.</p> <ul> <li>Core defines the interfaces of Autoware</li> <li>Both Core and Universe refer to the interface</li> <li>Core has high-quality code</li> <li>Universe has experimental level code</li> </ul> <p>With this, we aim to accomplish the following things.</p> <ul> <li>Contributors can feel free to send small PRs.</li> <li>We can keep high-quality for the Core code.</li> <li>We can rapidly build prototypes in Universe.</li> <li>We can develop a lot of extensions, including cutting-edge features, based on the interfaces.</li> </ul>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/repository-configuration/#definition-of-coreuniverse","title":"Definition of Core/Universe","text":"<p>Core</p> <ul> <li>Complete end-to-end autonomous driving framework</li> <li>Supports all current AWF ODDs</li> <li>Provides the definitions and the functionality for which other packages can extend</li> <li>Strict code and quality control</li> <li>Heavily managed by the AWF</li> <li>Stable base implementation</li> </ul> <p>Universe</p> <ul> <li>Additional packages built on top of Core</li> <li>Extends Autoware functionality beyond the AWF ODDs</li> <li>Completely dependent on Core functionality and message definitions</li> <li>Relaxed code and quality control</li> <li>Community managed</li> <li>Enables quick experimentation and prototype testing</li> </ul>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/repository-configuration/#repositories-and-roles","title":"Repositories and roles","text":"<p>Although some repositories might be added in the future, these are enough for explaining the core concept.</p> <ul> <li>autowarefoundation/autoware<ul> <li>This is a meta-repository that contains <code>.repos</code> files to construct a workspace.</li> <li>Since it's prospected to be forked by users, we don't put a lot of information here to avoid unnecessary differences.</li> </ul> </li> <li>autowarefoundation/autoware_common<ul> <li>This is a repository that contains ROS packages referenced in common by many repositories like libraries and utilities.</li> <li>In order to reduce the CI execution time, splitting that kind of packages from a big repository is a good practice.</li> </ul> </li> <li>autowarefoundation/autoware.core<ul> <li>This is a core repository that contains high-quality and stable ROS packages for Autonomous Driving.</li> <li>Although it's almost empty at this time, it will be implemented based on Autoware.Auto and Autoware.Universe during the next ODD project.</li> </ul> </li> <li>autowarefoundation/autoware.universe<ul> <li>This is a core repository that contains experimental but cutting-edge ROS packages for Autonomous Driving.</li> </ul> </li> <li>autowarefoundation/autoware_launch<ul> <li>This is a launch configuration repository that contains node configurations and their parameters.</li> </ul> </li> <li>autowarefoundation/autoware-github-actions<ul> <li>This is a repository for CI that contains reusable workflows of GitHub Actions.</li> <li>Since Autoware has a lot of repositories in total, making CI scripts DRY(Don't Repeat Yourself) is efficient.</li> </ul> </li> <li>autowarefoundation/autoware-documentation<ul> <li>This is a documentation repository for Autoware users and developers.</li> <li>Since Autoware Core/Universe has multiple repositories, preparing a central documentation repository is more user-friendly than writing distributed documentation in each repository.</li> </ul> </li> </ul>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/repository-configuration/#faq","title":"FAQ","text":""},{"location":"version-1.0/application-example/driverless-bus/software-requirements/repository-configuration/#why-dont-use-the-meta-repository-for-documentation","title":"Why don't use the meta-repository for documentation?","text":"<p>Since it's forked by many users, documentation changes would be noise during syncing repositories.</p>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/repository-configuration/#why-autowareorg-isnt-enough-for-documentation","title":"Why autoware.org isn't enough for documentation?","text":"<p>Since Software Engineers can't maintain it easily, it's hard to write a lot of information and keep up-to-date.</p>"},{"location":"version-1.0/application-example/driverless-bus/software-requirements/repository-configuration/#why-both-autoware-documentation-and-autoware-reference-design-this-site-are-required","title":"Why both <code>autoware-documentation</code> and <code>autoware-reference-design (this site)</code> are required?","text":"<p>It's for a kind of separation of concerns. Too much information on one site makes confusion.</p> <ul> <li><code>autoware-documentation</code> is mainly for users.</li> <li><code>autoware-reference-design</code> is for core developers.</li> </ul>"},{"location":"version-1.0/application-example/driverless-bus/system-configuration/","title":"System Configuration","text":"<p>The content is a work in progress.</p> <p>This chapter should show the physical configuration of the system.</p>"},{"location":"version-1.0/application-example/driverless-bus/system-requirements/","title":"System Requirements","text":"<p>The content is a work in progress.</p> <p>This chapter should show requirements for the system of interest and its sub-systems.</p> <ul> <li>Parity Requirements</li> </ul>"},{"location":"version-1.0/application-example/driverless-bus/system-requirements/parity-requirements/","title":"Parity","text":""},{"location":"version-1.0/application-example/driverless-bus/system-requirements/parity-requirements/#importance-of-the-parity-in-the-verification-of-autonomous-driving-systems","title":"Importance of the parity in the verification of autonomous driving systems","text":"<p>One of the most important points in the verification process of the autonomous driving system is the guaranteed level of the parity between the edge (onboard) and the cloud (CI /CD) environment. Various types of the parity and the information that is useful in the verification architecture taking the parity into consideration \u3000 are explained.</p>"},{"location":"version-1.0/application-example/driverless-bus/system-requirements/parity-requirements/#parity-types","title":"Parity types","text":""},{"location":"version-1.0/application-example/driverless-bus/system-requirements/parity-requirements/#device-parity","title":"Device Parity","text":"<p>The parity of the hardware (machines). When using the public cloud, as the device variation available on the public cloud is generally limited, it is difficult to guarantee this device parity.</p>"},{"location":"version-1.0/application-example/driverless-bus/system-requirements/parity-requirements/#cpu-architecture-parity","title":"CPU Architecture Parity","text":"<p>The parity of the processor implementation including the microservice architecture and the clock speed, etc.</p>"},{"location":"version-1.0/application-example/driverless-bus/system-requirements/parity-requirements/#isa-parity","title":"ISA Parity","text":"<p>The ISA (Instruction Set Architecture) Parity is different from the CPU Architecture Parity. It means the parity of the available register resource, instruction set, and the calculation functionality, where the processor implementation is abstracted.</p>"},{"location":"version-1.0/application-example/driverless-bus/system-requirements/parity-requirements/#runtime-parity","title":"Runtime Parity","text":"<p>The Runtime Parity means the parity of the kernel module and the container runtime, where the built result at the application level is guaranteed to run flawlessly.</p> <p>However, depending on the implementation, some modules do not run even if the Runtime Parity is secured. For example, the object detection module which is optimized for a GPU model.</p>"},{"location":"version-1.0/application-example/driverless-bus/system-requirements/parity-requirements/#environment-parity","title":"Environment Parity","text":"<p>The Environment Parity means the parity of the network configuration, set of frameworks and libraries of the autonomous driving system applications.</p>"},{"location":"version-1.0/application-example/driverless-bus/system-requirements/parity-requirements/#parity-and-cloud-native-devops","title":"Parity and Cloud Native DevOps","text":"<p>In autonomous driving system verification, it is important to conduct the necessary tests by understanding what level of parity is guaranteed for the verification environment compared to the vehicle environment.</p> <p>On the other hand, in case that the public cloud is used as a cloud native environment, the Device Parity may not be fulfilled. Depending on the choice of the chip, the CPU Architecture Parity or the ISA Parity may not be met.</p> <p>It is crucial to conduct tests in the bench environment while improving the development experience by executing the sufficient number of tests in a short time period in a cloud native manner.</p>"},{"location":"version-1.0/start-guide/","title":"Start guide","text":"<p>This page describes how to install, set up and run Autoware and its associated simulators on supported development platforms.</p> <ol> <li>Installation explains how to set up the development environment that are described in the System Configuration chapter.</li> <li>How to run Autoware shows how to run Autoware on the development platform that are set up in the Installation chapter.</li> <li>How to run simulators demonstrates how to run simulators that are set up in the Installation chapter.</li> </ol>"},{"location":"version-1.0/start-guide/how-to-run-autoware/","title":"How to run Autoware","text":"<p>This page explains how to run Autoware on the development platform that are set up in the Installation chapter.</p>"},{"location":"version-1.0/start-guide/how-to-run-autoware/#minimum-requirements","title":"Minimum requirements","text":"<ul> <li>Developer Platform: TODO</li> <li>In-Vehicle Development Platform 1: TODO</li> <li>Software Tool: TODO</li> <li>Container Image: TODO</li> </ul>"},{"location":"version-1.0/start-guide/how-to-run-autoware/#1-run-autoware-on-the-developer-platform","title":"1. Run Autoware on the developer platform","text":""},{"location":"version-1.0/start-guide/how-to-run-autoware/#run-autowareauto-on-ava-platform-or-pcu","title":"Run Autoware.Auto on AVA platform or PCU","text":"<ol> <li> <p>Open terminal window for each module on you host.</p> </li> <li> <p>Access AVA platform or PCU via SSH in each terminal window.</p> </li> <li> <p>Find docker image id.</p> </li> </ol> <pre><code>docker image ls\nREPOSITORY                                    TAG                                                           IMAGE ID       CREATED       SIZE\npublic.ecr.aws/k7o9k6q7/tier4/autoware.auto   open_ad_kit-autoware-auto-20211111234534-88ea1196cdc0-2zv2o   48a4503b4fe4   11 days ago   6.65GB\n</code></pre> <p>You can find id such as <code>48a4503b4fe4</code>.</p> <ol> <li> <p>Launch modules.</p> <p>Replace <code>48a4503b4fe4</code> with your docker image id.</p> <p>Terminal 1 (map)</p> <pre><code>docker run --rm -it --net host -v ~/map:/map -v ~/cyclonedds:/etc/cyclonedds 48a4503b4fe4 /bin/bash -c \"export CYCLONEDDS_URI=file:///etc/cyclonedds/cyclonedds.xml; export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp; source install/setup.bash; ros2 launch scenario_simulator_launch autoware_auto_mapping.launch.py map_path:=/map/kashiwanoha\"\n</code></pre> <p>Terminal 2 (perception)</p> <pre><code>docker run --rm -it --net host -v ~/cyclonedds:/etc/cyclonedds 48a4503b4fe4 /bin/bash -c \"export CYCLONEDDS_URI=file:///etc/cyclonedds/cyclonedds.xml; export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp; source install/setup.bash; ros2 launch scenario_simulator_launch autoware_auto_perception.launch.py\"\n</code></pre> <p>Terminal 3 (planning)</p> <pre><code>docker run --rm -it --net host -v ~/cyclonedds:/etc/cyclonedds 48a4503b4fe4 /bin/bash -c \"export CYCLONEDDS_URI=file:///etc/cyclonedds/cyclonedds.xml; export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp; source install/setup.bash; ros2 launch scenario_simulator_launch autoware_auto_planning.launch.py\"\n</code></pre> <p>Terminal 4 (vehicle)</p> <pre><code>docker run --rm -it --net host -v ~/cyclonedds:/etc/cyclonedds 48a4503b4fe4 /bin/bash -c \"export CYCLONEDDS_URI=file:///etc/cyclonedds/cyclonedds.xml; export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp; source install/setup.bash; ros2 launch autoware_auto_launch autoware_auto_vehicle.launch.py\"\n</code></pre> </li> </ol>"},{"location":"version-1.0/start-guide/how-to-run-autoware/#2-run-autoware-on-the-in-vehicle-development-platform","title":"2. Run Autoware on the in-vehicle development platform","text":"<p>If you do NOT need a vehicle-edge platform, please skip this step.</p> <p>TODO</p>"},{"location":"version-1.0/start-guide/how-to-run-autoware/#3-run-simulators-on-the-development-platform","title":"3. Run simulators on the development platform","text":"<p>Please refer to the How to run simulators section.</p> <ol> <li> <p>This is optional if you do NOT need a vehicle-edge platform.\u00a0\u21a9</p> </li> </ol>"},{"location":"version-1.0/start-guide/how-to-run-simulators/","title":"How to run simulators","text":"<p>This page describes how to run simulators that work on your local environment and the cloud environment.</p> <ul> <li>Scenario simulator verifies your planning algorithms.</li> <li>Logging simulator verifies your perception algorithms with ROSBAG data that are recorded beforehand.</li> </ul> <p>There are some limitations and issues for the simulators.</p>"},{"location":"version-1.0/start-guide/how-to-run-simulators/limitations-and-issues/limitations-and-issues/","title":"Limitations and issues","text":""},{"location":"version-1.0/start-guide/how-to-run-simulators/limitations-and-issues/limitations-and-issues/#limitations","title":"Limitations","text":"<ul> <li>Simulation by using LGSVL is not supported because a map for scenario simulator (<code>kashiwanoha</code>) is not registered in LGSVL Simulator Content Store.</li> </ul>"},{"location":"version-1.0/start-guide/how-to-run-simulators/limitations-and-issues/limitations-and-issues/#issues","title":"Issues","text":"<ul> <li>The ego vehicle drives slowly.</li> </ul> <ul> <li> <p><code>UC-001-0018-Kashiwa:1</code> failed with simulation timeout. The ego vehicle gets stuck after NPC crossed ahead of the ego vehicle. This might be caused by the slow driving.</p> <p></p> </li> </ul>"},{"location":"version-1.0/start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/","title":"Run on the cloud platform","text":"<p>This page describes how to run the logging simulator on the cloud platform.</p> <p>The cloud platform, Web.Auto, is offered by TIER IV, and it is available for the Autoware Foundation members.</p>"},{"location":"version-1.0/start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/#minimum-requirements","title":"Minimum requirements","text":"<ul> <li>Developer Platform: TODO</li> <li>In-Vehicle Development Platform 1: TODO</li> <li>Software Tool: TODO</li> <li>Container Image: TODO</li> <li>Data Pipeline: TODO</li> </ul>"},{"location":"version-1.0/start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/#1-create-your-account-on-the-cloud-platform","title":"1. Create your account on the cloud platform","text":"<p>If you already have access to Web.Auto, please skip this step.</p> <p>TODO</p>"},{"location":"version-1.0/start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/#2-set-up-a-simulation-on-the-cloud-platform","title":"2. Set up a simulation on the cloud platform","text":"<p>TODO</p>"},{"location":"version-1.0/start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/#3-run-the-logging-simulator-on-the-cloud-platform","title":"3. Run the logging simulator on the cloud platform","text":"<p>TODO</p> <ol> <li> <p>This is optional if you do NOT need a vehicle-edge platform.\u00a0\u21a9</p> </li> </ol>"},{"location":"version-1.0/start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/","title":"Run on the cloud platform","text":"<p>This page describes how to run the scenario simulator on the cloud platform.</p> <p>The cloud platform, Web.Auto, is offered by TIER IV, and it is available for the Autoware Foundation members.</p>"},{"location":"version-1.0/start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#minimum-requirements","title":"Minimum requirements","text":"<ul> <li>Developer Platform: TODO</li> <li>In-Vehicle Development Platform 1: TODO</li> <li>Software Tool: TODO</li> <li>Container Image: TODO</li> <li>Data Pipeline: TODO</li> </ul>"},{"location":"version-1.0/start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#1-create-your-account-on-the-cloud-platform","title":"1. Create your account on the cloud platform","text":"<p>If you already have access to Web.Auto, please skip this step.</p>"},{"location":"version-1.0/start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#cloud-native-cicd-pipeline-webauto","title":"Cloud Native CI/CD Pipeline - Web.Auto","text":"<p>The CI/CD pipeline for the scenario simulation is available for the Autoware Foundation members.</p> <p>You can check the scenario simulation results on the CI/CD dashboard.</p> <p>This material describes the CI/CD pipeline in more details.</p> <ol> <li>Create an account with Tier IV account server (https://account.tier4.jp/).</li> <li>Participate in an Autoware Foundation working group (Simulation, Autonomy Software, Operational Design DomainD, Open AD Kit) and report the Tier IV Account ID you created in 1. to the leader of your working group.</li> <li>Then you can login to the CI/CD dashboard and see the scenario simulation results.</li> </ol>"},{"location":"version-1.0/start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#2-set-up-a-simulation-on-the-cloud-platform","title":"2. Set up a simulation on the cloud platform","text":"<p>TODO</p>"},{"location":"version-1.0/start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#3-run-the-scenario-simulator-on-the-cloud-platform","title":"3. Run the scenario simulator on the cloud platform","text":"<p>TODO</p> <ol> <li> <p>This is optional if you do NOT need a vehicle-edge platform.\u00a0\u21a9</p> </li> </ol>"},{"location":"version-1.0/start-guide/how-to-run-simulators/scenario-simulator/run-on-local-env/","title":"Run on your local environment","text":"<p>This page describes how to run the scenario simulator on the developer platform that is set up in the Installation chapter.</p>"},{"location":"version-1.0/start-guide/how-to-run-simulators/scenario-simulator/run-on-local-env/#minimum-requirements","title":"Minimum requirements","text":"<ul> <li>Developer Platform: TODO</li> <li>In-Vehicle Development Platform 1: TODO</li> <li>Software Tool: TODO</li> <li>Container Image: TODO</li> <li>Data Pipeline: TODO</li> </ul>"},{"location":"version-1.0/start-guide/how-to-run-simulators/scenario-simulator/run-on-local-env/#run-visualization-and-scenario-simulator-on-the-developer-platform","title":"Run visualization and scenario simulator on the developer platform","text":"<ol> <li> <p>Run Rviz.</p> <p>You already cloned Autoware.Auto repository, navigate to the cloned directory.</p> <ol> <li> <p>Launch ADE.</p> <pre><code>cd ~/adehome/AutowareAuto\nade --rc .aderc-amd64-foxy-lgsvl start --update --enter\n</code></pre> </li> <li> <p>Launch visualization in ADE.</p> <pre><code>source /opt/AutowareAuto/setup.bash\nros2 launch autoware_auto_launch autoware_auto_visualization.launch.py\n</code></pre> </li> </ol> </li> <li> <p>Find docker image id.</p> <pre><code>docker image ls\nREPOSITORY                                                                            TAG                                                                           IMAGE ID       CREATED       SIZE\nregistry.gitlab.com/autowarefoundation/autoware.auto/autowareauto/amd64/binary-foxy   master                                                                        91512aa9e485   3 days ago    176MB\nregistry.gitlab.com/autowarefoundation/autoware.auto/autowareauto/amd64/ade-foxy      master                                                                        0d9978b7113d   4 days ago    5.74GB\nscenario_simulator                                                                    open_ad_kit-autoware-auto-planning_sim_v2-20211111234534-88ea1196cdc0-2zv2o   d766a256a8c3   11 days ago   5.95GB\nregistry.gitlab.com/autowarefoundation/autoware.auto/ade-lgsvl/foxy                   2021.3                                                                        077c172fa5b9   5 weeks ago   379MB\n</code></pre> <p>You can find id such as <code>d766a256a8c3</code>.</p> </li> <li> <p>Launch scenario simulator.</p> <p>Replace <code>/home/foo</code> with your home directory.</p> <p>Replace <code>d766a256a8c3</code> with your docker image id.</p> <pre><code>docker run --rm -it --net host -v /home/foo/scenario:/scenario -v /home/foo/cyclonedds:/etc/cyclonedds d766a256a8c3 /bin/bash -c \"export CYCLONEDDS_URI=file:///etc/cyclonedds/cyclonedds.xml; export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp; source install/setup.bash; ros2 launch scenario_test_runner scenario_test_runner.launch.py sensor_model:=aip_xx1 vehicle_model:=lexus launch_autoware:=false architecture_type:=awf/auto scenario:=/scenario/scenario_e3b743e7-110c-4db6-b136-e5ffd5538315_2.yml\"\n</code></pre> </li> </ol> <p>Now you can see...</p> <p>DEMO Video</p> <p></p> <ol> <li> <p>This is optional if you do NOT need a vehicle-edge platform.\u00a0\u21a9</p> </li> </ol>"},{"location":"version-1.0/start-guide/installation/","title":"Installation","text":"<p>This page explains how to set up the development environment that are described in the System Configuration chapter.</p>"},{"location":"version-1.0/start-guide/installation/#minimum-requirements","title":"Minimum requirements","text":"<ul> <li>Developer Platform:<ul> <li>AVA Platform or PCU Platform</li> </ul> </li> <li>In-Vehicle Development Platform 1: TODO</li> <li>Software Tool:<ul> <li>Scenario simulator version x.x 2</li> <li>Rviz version x.x 2</li> </ul> </li> <li>Container Image:<ul> <li>Autoware.Auto for arm64</li> <li>Scenario simulator for x86_64 2</li> </ul> </li> </ul> <p>The following diagram shows a minimum configuration of Open AD Kit. \"Your host machine\" will be replaced by the cloud development platform if you can use Web.Auto.</p> <p></p>"},{"location":"version-1.0/start-guide/installation/#1-set-up-the-developer-platform","title":"1. Set up the developer platform","text":"<p>The setup procedure depends on the developer platform.</p>"},{"location":"version-1.0/start-guide/installation/#ava-platform","title":"AVA Platform","text":"<ol> <li>Getting started with EWAOL</li> <li>Boot EWAOL via SSD Boot</li> <li>Extend rootfs partition</li> </ol>"},{"location":"version-1.0/start-guide/installation/#pcu-platform","title":"PCU Platform","text":"<ol> <li>Getting started with PCU</li> </ol>"},{"location":"version-1.0/start-guide/installation/#2-set-up-the-in-vehicle-platform","title":"2. Set up the in-vehicle platform","text":"<p>If you do NOT need a vehicle-edge platform, please skip this step.</p> <p>TODO</p>"},{"location":"version-1.0/start-guide/installation/#3-install-autoware-container-images-on-the-developer-platform","title":"3. Install Autoware container images on the developer platform","text":""},{"location":"version-1.0/start-guide/installation/#ava-platform_1","title":"AVA Platform","text":"<ol> <li>System setup on AVA Platform</li> </ol>"},{"location":"version-1.0/start-guide/installation/#pcu-platform_1","title":"PCU Platform","text":"<ol> <li>System setup on PCU</li> </ol>"},{"location":"version-1.0/start-guide/installation/#4-install-autoware-container-images-on-the-in-vehicle-platform","title":"4. Install Autoware container images on the in-vehicle platform","text":"<p>If you do NOT need a vehicle-edge platform, please skip this step.</p> <p>TODO</p>"},{"location":"version-1.0/start-guide/installation/#5-set-up-software-tools","title":"5. Set up software tools","text":"<p>If you can use the cloud development platform, please skip this step.</p>"},{"location":"version-1.0/start-guide/installation/#ava-platform_2","title":"AVA Platform","text":"<ol> <li>System setup on your host</li> </ol>"},{"location":"version-1.0/start-guide/installation/#pcu-platform_2","title":"PCU Platform","text":"<ol> <li>System setup on your host</li> </ol>"},{"location":"version-1.0/start-guide/installation/#6-run-autoware-on-the-development-platform","title":"6. Run Autoware on the development platform","text":"<p>Please refer to the How to run Autoware section.</p> <ol> <li> <p>This is unnecessary if you do NOT need a vehicle-edge platform.\u00a0\u21a9</p> </li> <li> <p>This is unnecessary if you can use the cloud development platform, Web.Auto.\u00a0\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"version-1.0/start-guide/installation/boot-ewaol/","title":"Boot EWAOL via SSD Boot","text":""},{"location":"version-1.0/start-guide/installation/boot-ewaol/#overview","title":"Overview","text":"<p>You need to use SSD enclosure case to flash yocto image to M.2 SSD directly.</p>"},{"location":"version-1.0/start-guide/installation/boot-ewaol/#get-yocto-image","title":"Get yocto image","text":"<ol> <li>Build yocto image with EWAOL by following the instructions Getting started with EWAOL, or Download the image from the website to your host machine;<ul> <li>AVA Developer Platform Downloads \u2013 I-Pi SMARC ( <code>Yocto with SOAFEE</code> is preferred.)</li> </ul> </li> </ol>"},{"location":"version-1.0/start-guide/installation/boot-ewaol/#flash-yocto-image","title":"Flash yocto image","text":"<p>Remove M.2 SSD from AVA platform and flash yocto image to it directly.</p> <ol> <li> <p>Remove M.2 SSD from AVA platform.</p> </li> <li> <p>Install M.2 SSD into a M.2 enclosure case.</p> </li> <li> <p>Plug it into your host machine.</p> </li> <li> <p>Then, show available block devices.</p> <pre><code>lsblk\nNAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT\n...\nsdn           8:208  0 119.2G  0 disk\n\u251c\u2500sdn1        8:209  0   512M  0 part\n\u251c\u2500sdn2        8:210  0     1G  0 part /media/foo/7d00c690-db24-462d-8c8d-dce7bdf151d8\n\u2514\u2500sdn3        8:211  0 117.8G  0 part\n</code></pre> </li> <li> <p>Flush yocto image to M.2 SSD.</p> <p> For example</p> <pre><code>sudo dd if=ewaol-image-docker-comhpc-20211022083723.rootfs.wic of=/dev/sdn bs=1M status=progress &amp;&amp; sync\n</code></pre> </li> </ol>"},{"location":"version-1.0/start-guide/installation/boot-ewaol/#extend-rootfs-partition","title":"Extend rootfs partition","text":"<p>You have to extend rootfs partition. Follow the instructions Extend rootfs partition</p>"},{"location":"version-1.0/start-guide/installation/boot-ewaol/#reinstall-ssd","title":"Reinstall SSD","text":"<ol> <li> <p>Remove M.2 SSD from enclosure case and install it into AVA platform, then turn it on.</p> </li> <li> <p>The following screen comes up, then login as <code>root</code> without password.</p> <pre><code>EWAOL (Edge Workload Abstraction and Orchestration Layer) 0.1 comhpc tty1\ncomhpc login:\n</code></pre> <p> You are able to access via SSH.</p> </li> </ol>"},{"location":"version-1.0/start-guide/installation/extend-rootfs/","title":"Extend rootfs partition","text":""},{"location":"version-1.0/start-guide/installation/extend-rootfs/#overview","title":"Overview","text":"<p>The rootfs partition is created with 5.2GB, but the size is too short to run docker container. So we have to extend rootfs partition, or create new partition and assign the whole docker folder to the new partition.</p> <p>Here is the instruction how to extend rootfs partition</p>"},{"location":"version-1.0/start-guide/installation/extend-rootfs/#extend-rootfs","title":"Extend rootfs","text":"<ol> <li> <p>Run <code>gparted</code>.</p> <p>You may get the following warning when you run <code>gparted</code>.</p> <p>Press <code>Fix</code>.</p> <p></p> <p>Contents of storage after we flashed yocto image to M.2 SSD.  </p> </li> <li> <p>Unmount partitions.</p> <p>To manipulate partitions, you need to unmount <code>root</code> and <code>data</code> partition.</p> <p>Right click <code>root</code> partition, then click <code>Unmount</code>.  </p> <p>Unmount <code>data</code> partition as well.</p> </li> <li> <p>Move <code>data</code> partition to the end of storage.</p> <p>Right click <code>data</code> partition, then click <code>Resize/Move</code>.  </p> <p>Drag the square to the right end.</p> <p> </p> <p>Then, click <code>Resize/Move</code>.</p> <p></p> <p>Click <code>OK</code>.</p> <p></p> </li> <li> <p>Extend rootfs partition to the end of disk.</p> <p>Right click <code>root</code> partition, then click <code>Resize/Move</code>.  </p> <p>Extend the square to the right end.</p> <p> </p> <p>Then, click <code>Resize/Move</code>.</p> <p></p> </li> <li> <p>Apply changes.</p> <p>Click check mark icon.</p> <p></p> <p>Click <code>Apply</code>.</p> <p></p> <p>You can get rootfs as follows.</p> <p></p> </li> </ol>"},{"location":"version-1.0/start-guide/installation/getting-started-pcu/","title":"Getting started with PCU","text":""},{"location":"version-1.0/start-guide/installation/getting-started-pcu/#overview","title":"Overview","text":"<p>Reference: PCU Setup Guide</p> <p>This instruction explains how to boot up Ubuntu on PCU and access it from host PC.</p> <ul> <li>If you are using onboard 64G EMMC as boot device, it's already been pre-installed with Ubuntu 20.04, and you can skip this step;</li> </ul> <ul> <li>If you would like to boot from SD card, you could either request a Micro SD card with pre-installed system or flash by yourself under instructions in below section. <code>Ubuntu 20.04</code> is preferred.</li> </ul>"},{"location":"version-1.0/start-guide/installation/getting-started-pcu/#hardware-setup","title":"Hardware Setup","text":"<p>The minimum recommended External Micro SD card size is 64GB, and the speed should be at least class 10 A1, it is strongly recommended to use high speed SD card, e.g. class U3, A2.</p> <p>To boot from SD card, \"SW1\" should be set as: <code>ON</code>, and SD card should be plugged in. </p> <p>For blank SD card, the system image need to be flashed first using another PC.</p>"},{"location":"version-1.0/start-guide/installation/getting-started-pcu/#get-mpu-image","title":"Get MPU image","text":"<p>Official images with recommended OS are available on PCU Resource Download page.</p> <p>Resource Download Page</p> <p>For PCU 2.0 hardware, please download the MPU image file for SD card as marked red to your local storage.</p> <p></p>"},{"location":"version-1.0/start-guide/installation/getting-started-pcu/#flash-mpu-image","title":"Flash MPU image","text":"<p>To flash MPU image on SD card, you will need a PC with a micro SD card reader.</p> <p>This step could be done on either Windows or Linux PC with different flash tools.</p> <p>Linux will be used in this instruction as example:</p> <ol> <li> <p>Insert card reader with target micro SD card to host PC.</p> </li> <li> <p>Find out device name for the SD card.</p> <pre><code>sudo lsblk\nNAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT\n...\nsda      8:0    0 238.5G  0 disk\n\u251c\u2500sda1   8:1    0   512M  0 part /boot/efi\n\u2514\u2500sda2   8:2    0   238G  0 part /\nsdb      8:16   0 447.1G  0 disk\n\u251c\u2500sdb1   8:17   0 428.4G  0 part\n\u251c\u2500sdb2   8:18   0   513M  0 part\n\u2514\u2500sdb3   8:19   0  18.2G  0 part\nsdc      8:32   1  14.9G  0 disk\n\u2514\u2500sdc1   8:33   1  14.9G  0 part /media/adlink/B4A1-62CD\n</code></pre> <p> In this case, <code>sdc</code> is the device name</p> </li> <li> <p>Flash image to SD card.</p> <pre><code>sudo gzip -dc YOUR-DOWNLOAD-PATH/xxx.gz |sudo dd of=/dev/YOUR-DEVICE\n</code></pre> <p>For example;</p> <pre><code>sudo gzip -dc ~/Downloads/autocore-1046-ubuntu20.04-sd-pcu2.0-sw0.5.0-20201210.gz |sudo dd of=/dev/sdc\n</code></pre> <p>Wait patiently until the flash process finishes, this may take up to half hour.</p> </li> <li> <p>Boot up.</p> <p>Now you can plug in the SD card to PCU and power up. The system should be ready to work.</p> </li> </ol>"},{"location":"version-1.0/start-guide/installation/getting-started-pcu/#connect-to-pcu-via-ssh","title":"Connect To PCU via SSH","text":"<p>You could connect to PCU via SSh either by ethernet or serial port.</p> <p>The default username, password and IP address of PCU is as below: </p>"},{"location":"version-1.0/start-guide/installation/getting-started-pcu/#ssh-through-ethernet","title":"SSH through ethernet","text":"<ol> <li> <p>Cable connection</p> <p>Connect host PC to RJ45 2 / RJ45 3 / RJ45 4 Eth port (Blue) on PCU board with Ethernet cable (GbE, need Cat.5e or above).</p> <p></p> </li> <li> <p>Configure static IP for host PC    You need to manually configure static IP for PC in order to connect with PCU, as there is no DHCP server running on PCU. The static IP should be different with PCU and within the same network segment. (e.g. 192.168.1.200)</p> <p></p> </li> <li> <p>SSH login</p> <pre><code>ssh user@192.168.1.239\n</code></pre> </li> </ol>"},{"location":"version-1.0/start-guide/installation/getting-started-pcu/#ssh-through-serial-port","title":"SSH through Serial Port","text":"<ol> <li> <p>Cable connection</p> <p>As an alternative, you could also choose to connect to PCU by micro USB (ttyUSB port in figure blow).</p> <p></p> </li> <li> <p>ttyUSB Settings</p> <p>For Linux users, you could use \"cutecom\" to connect to PCU.</p> <pre><code>sudo apt install cutecom\ncutecom\n</code></pre> <p>Please set parameters as follows, <code>Device</code> shall be chosen based on your host PC.</p> <p></p> <p>For other system users, the parameters are:</p> Parameter Value Baudrate 115200 Data 8 Stop bit 1 Parity None Hardware flow control no Software flow control no </li> <li> <p>Reset PCU and Login</p> <p>Press reset button and wait until login.</p> <pre><code>ssh user@192.168.1.239\n</code></pre> </li> </ol>"},{"location":"version-1.0/start-guide/installation/getting-started-pcu/#check-pcu-public-ip-address","title":"Check PCU public IP Address","text":"<p>Connect PCU to internet via RJ45 1 Eth port (Red), this Eth port is configured to obtain IP address automatically from DHCP by default.</p> <p>From section above, you can SSH connect to PCU, and you can look for IP address of the public ethernet port(fm1-mac5).</p> <pre><code>ifconfig fm1-mac5\nfm1-mac5: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n  inet 192.168.10.221  netmask 255.255.255.0  broadcast 192.168.10.255\n  inet6 fe80::204:7cff:fe2e:191  prefixlen 64  scopeid 0x20&lt;link&gt;\n  ether 00:04:7c:2e:01:91  txqueuelen 1000  (Ethernet)\n  RX packets 2806  bytes 3665212 (3.6 MB)\n  RX errors 0  dropped 0  overruns 0  frame 0\n  TX packets 2238  bytes 175964 (175.9 KB)\n  TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n  device memory 0x1ae8000-1ae8fff\n</code></pre> <p> You can find IP address of PCU such as <code>192.168.10.221</code>.</p>"},{"location":"version-1.0/start-guide/installation/getting-started/","title":"Getting started with EWAOL","text":""},{"location":"version-1.0/start-guide/installation/getting-started/#overview","title":"Overview","text":"<p>Reference: Project Quickstart \u2014 EWAOL documentation</p> <p>This instruction explain how to build yocto image with EWAOL on your host machine. If you are using AVA Developer Platform, you can also download built image from ADLINK's website, and you can skip this steps;</p> <ul> <li>AVA Developer Platform Downloads \u2013 I-Pi SMARC <code>Yocto with SOAFEE</code> is preferred.</li> </ul>"},{"location":"version-1.0/start-guide/installation/getting-started/#build-host-setup","title":"Build Host Setup","text":"<ol> <li> <p>Install required packages for the build host by following The Yocto Project \u00ae 3.3.1 documentation.</p> <pre><code>sudo apt-get install gawk wget git diffstat unzip texinfo gcc build-essential chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev pylint3 xterm python3-subunit mesa-common-dev\n</code></pre> </li> <li> <p>Install the kas setup tool.</p> <pre><code>sudo -H pip3 install kas\n</code></pre> </li> </ol>"},{"location":"version-1.0/start-guide/installation/getting-started/#checkout-the-repository-for-ava-platform","title":"Checkout the repository for AVA platform","text":"<ol> <li> <p>ADLINK / meta-adlink-ampere</p> <pre><code>git clone https://github.com/ADLINK/meta-adlink-ampere.git\n</code></pre> </li> <li> <p>EWAOL / meta-ewaol</p> <pre><code>cd meta-adlink-ampere\ngit clone https://git.gitlab.arm.com/ewaol/meta-ewaol.git\n</code></pre> </li> <li> <p>Build via kas</p> <pre><code>kas build ComHpc.yml\n</code></pre> </li> </ol> <p> You should be careful of utilizing full CPU power during build. </p> <p>You can choose the way to boot EWAOL, SSD Boot(highly recommended) or USB Boot.</p> <ul> <li> SSD Boot (highly recommended)<ul> <li>You need to use SSD enclosure case to flash yocto image to M.2 SSD directly.</li> </ul> </li> <li> <p>USB Boot</p> <ul> <li> <p>You need to use 32GB USB, not 64GB USB to flash yocto image.</p> <p> Do not use 64GB USB because bios gets stuck due to EDK II bug.</p> </li> </ul> </li> </ul>"},{"location":"version-1.0/start-guide/installation/system-setup-ava/","title":"System Setup on AVA platform","text":""},{"location":"version-1.0/start-guide/installation/system-setup-ava/#overview","title":"Overview","text":"<p>This instruction explains how to perform system setup for test execution on AVA platform.</p> <p>You need to copy docker images and necessary files.</p>"},{"location":"version-1.0/start-guide/installation/system-setup-ava/#access-to-ava-platform-via-ssh","title":"Access to AVA platform via SSH","text":"<pre><code>ssh root@IP-ADDRESS\n</code></pre> <p>For example;</p> <pre><code>ssh root@192.168.10.27\n</code></pre>"},{"location":"version-1.0/start-guide/installation/system-setup-ava/#copy-autowareauto-image-to-ava-platform","title":"Copy Autoware.Auto image to AVA platform","text":"<p>The docker image of Autoware.Auto is registered in GitLab Container Registry. </p> <ol> <li> <p>Copy docker image to AVA platform.</p> <pre><code>docker pull registry.gitlab.com/autowarefoundation/autoware.auto/autowareauto/arm64/openadkit-foxy:latest\n</code></pre> </li> </ol>"},{"location":"version-1.0/start-guide/installation/system-setup-ava/#copy-necessary-files-to-usb-drive","title":"Copy necessary files to USB drive","text":"<ol> <li> <p>Copy files related to map contents.</p> <p>Files are placed in the directory docs/Appendix/Open-AD-Kit-Start-Guide/map</p> <ul> <li>lanelet2_map.osm</li> <li>pointcloud_map.pcd</li> <li>global_map_center.pcd.yaml</li> <li>lanelet2_map_provider.osm.yaml</li> <li>map_publisher.param.yaml</li> </ul> <p>Copy files to your USB drive as the following directory structure.</p> <p></p> </li> <li> <p>Copy configuration file of Cyclone DDS.</p> <p>In this test, we are using Cyclone DDS, so you also need to copy configuration file of Cyclone DDS.</p> <p>File is placed in the directory docs/Appendix/Open-AD-Kit-Start-Guide/cyclonedds</p> <ul> <li>cyclonedds.xml</li> </ul> <p>Copy the file to your USB drive as the following directory structure.</p> <p></p> </li> <li> <p>Copy kernel configuration file for tuning kernel parameters.</p> <p>We have to reconfigure kernel parameters by using <code>sysctl</code> for system stability.</p> <p>File is placed in the directory docs/Appendix/Open-AD-Kit-Start-Guide/sysctl.d</p> <ul> <li>60_cyclonedds.conf</li> </ul> <p>Copy the file to your USB root.</p> </li> </ol>"},{"location":"version-1.0/start-guide/installation/system-setup-ava/#copy-files-from-usb-drive-to-ava-platform","title":"Copy files from USB drive to AVA platform","text":"<ol> <li> <p>Plug your USB drive into AVA platform and copy files</p> <ol> <li> <p>Find USB device name.</p> <pre><code>lsblk\nNAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT\nsda           8:16   1  28.9G  0 disk\n`-sda1        8:17   1  28.9G  0 part\nnvme0n1     259:0    0 119.2G  0 disk\n|-nvme0n1p1 259:1    0   256M  0 part\n|-nvme0n1p2 259:2    0   118G  0 part /\n`-nvme0n1p3 259:3    0     1G  0 part\n</code></pre> </li> <li> <p>Mount USB driver and copy directory.</p> <pre><code>mkdir -p /mnt/usb\nmount /dev/sda1 /mnt/usb\ncp -r /mnt/usb/* ~/\n</code></pre> </li> <li> <p>Move kernel configuration file to <code>/etc/sysctl.d</code>.</p> <pre><code>mv ~/60_cyclonedds.conf /etc/sysctl.d\n</code></pre> </li> <li> <p>Update kernel parameters.</p> <pre><code>sysctl -p /etc/sysctl.d/60_cyclonedds.conf\n</code></pre> </li> </ol> </li> </ol>"},{"location":"version-1.0/start-guide/installation/system-setup-ava/#modify-cycloneddsxml","title":"Modify <code>cyclonedds.xml</code>","text":"<p>You need to change the element <code>NetworkInterfaceAddress</code> to the network interface currently in use.</p> <ol> <li> <p>Find network interface.</p> <pre><code>ip addr\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n 2: enP4p4s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:11:22:33:44:55 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.10.27/24 brd 192.168.10.255 scope global dynamic enP4p4s0\n       valid_lft 332sec preferred_lft 332sec\n    inet 192.168.10.13/24 brd 192.168.10.255 scope global secondary dynamic noprefixroute enP4p4s0\n       valid_lft 337sec preferred_lft 262sec\n    inet6 fe80::34c:b6f7:b356:b7/64 scope link\n       valid_lft forever preferred_lft forever\n    inet6 fe80::230:64ff:fe1a:a65/64 scope link\n       valid_lft forever preferred_lft forever\n 3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default\n    link/ether aa:bb:cc:dd:ee:ff brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n</code></pre> <p> You can find a network interface such as <code>enP4p4s0</code>.</p> </li> <li> <p>Change the <code>NetworkInterfaceAddress</code>.</p> <pre><code>vi ~/cyclonedds/cyclonedds.xml\n</code></pre> <p>For example;  cyclonedds.xml</p> <pre><code> &lt;General&gt;\n-  &lt;NetworkInterfaceAddress&gt;lo&lt;/NetworkInterfaceAddress&gt;\n+  &lt;NetworkInterfaceAddress&gt;enP4p4s0&lt;/NetworkInterfaceAddress&gt;\n&lt;/General&gt;\n</code></pre> </li> </ol>"},{"location":"version-1.0/start-guide/installation/system-setup-host/","title":"System Setup on your host","text":""},{"location":"version-1.0/start-guide/installation/system-setup-host/#overview","title":"Overview","text":"<p>This instruction explains how to perform system setup for test execution on your host.</p> <p>You need to copy docker images and necessary files, and checkout Autoware.Auto.</p>"},{"location":"version-1.0/start-guide/installation/system-setup-host/#copy-scenario-simulator-image-to-your-host-machine","title":"Copy scenario simulator image to your host machine","text":"<p>The docker image of scenario simulator is registered in docker hub. </p> <ol> <li> <p>Copy docker image to your host machine.</p> <pre><code>docker pull tier4/scenario_simulator_v2:open_ad_kit-amd64-foxy\n</code></pre> </li> </ol>"},{"location":"version-1.0/start-guide/installation/system-setup-host/#copy-necessary-files-to-your-host-machine","title":"Copy necessary files to your host machine","text":"<ol> <li> <p>Copy scenario files for scenario simulator.</p> <p>Files are placed in the directory docs/Appendix/Open-AD-Kit-Start-Guide/scenario</p> <p>[Currently placed]</p> <ul> <li>UC-001-0001-Kashiwa:2</li> <li>UC-001-0018-Kashiwa:1</li> </ul> <p>Copy the scenario files to your <code>home</code> directory as the following directory structure.</p> <p></p> </li> <li> <p>Copy configuration file of Cyclone DDS.</p> <p>You also need to copy <code>cyclonedds.xml</code> to your <code>home</code> directory.</p> <p></p> </li> <li> <p>Copy kernel configuration file to <code>/etc/sysctl.d</code>.</p> <p>You also need to copy <code>60_cyclonedds.conf</code> to <code>/etc/sysctl.d</code> directory in your host as well.</p> <pre><code>cp 60_cyclonedds.conf /etc/sysctl.d\n</code></pre> </li> <li> <p>Update kernel parameters.</p> <pre><code>sysctl -p /etc/sysctl.d/60_cyclonedds.conf\n</code></pre> </li> </ol>"},{"location":"version-1.0/start-guide/installation/system-setup-host/#modify-cycloneddsxml","title":"Modify <code>cyclonedds.xml</code>","text":"<p>You need to change the element <code>NetworkInterfaceAddress</code> to the network interface currently in use.</p> <ol> <li> <p>Find network interface.</p> <pre><code>ip addr\n1: lo: &lt;LOOPBACK,MULTICAST,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n 2: enp0s31f6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000\n    link/ether 66:77:88:99:aa:bb brd ff:ff:ff:ff:ff:ff\n    inet 192.168.10.1/24 brd 192.168.10.255 scope global noprefixroute enp0s31f6\n       valid_lft forever preferred_lft forever\n    inet6 fe80::f15d:4196:b777:6875/64 scope link noprefixroute\n       valid_lft forever preferred_lft forever\n 3: wlp82s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000\n    link/ether cc:dd:ee:ff:00:01 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.0.28/24 brd 192.168.0.255 scope global dynamic noprefixroute wlp82s0\n       valid_lft 3137sec preferred_lft 3137sec\n    inet6 fe80::f493:f223:dfcc:bd1b/64 scope link noprefixroute\n       valid_lft forever preferred_lft forever\n 4: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default\n    link/ether 23:45:67:89:ab:cd brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n</code></pre> <p> You can find a network interface such as <code>enp0s31f6</code>.</p> </li> <li> <p>Change the <code>NetworkInterfaceAddress</code>.</p> <pre><code>vi ~/cyclonedds/cyclonedds.xml\n</code></pre> <p>For example;  cyclonedds.xml</p> <pre><code> &lt;General&gt;\n-  &lt;NetworkInterfaceAddress&gt;lo&lt;/NetworkInterfaceAddress&gt;\n+  &lt;NetworkInterfaceAddress&gt;enp0s31f6&lt;/NetworkInterfaceAddress&gt;\n&lt;/General&gt;\n</code></pre> </li> </ol>"},{"location":"version-1.0/start-guide/installation/system-setup-host/#setup-ade","title":"Setup ADE","text":"<p>In general, Autoware.Auto runs by using the Agile Development Environment (ADE), so we need to install ADE.</p> <p>In this test, we use launch file placed in Autoware.Auto to run visualization quickly and easily.</p> <ol> <li> <p>Install ADE on AVA platform by following the instructions; Installation \u2014 ADE 4.4.0dev documentation</p> <p>Download and setup ADE.</p> <pre><code>wget https://gitlab.com/ApexAI/ade-cli/-/jobs/1341322852/artifacts/raw/dist/ade+aarch64 -O ade\nchmod +x ade\nmv ade /usr/bin/\n</code></pre> </li> <li> <p>Setup ADE home directory by following the instructions; Installation with ADE</p> <pre><code>mkdir -p ~/adehome\ncd ~/adehome\ntouch .adehome\n</code></pre> </li> </ol>"},{"location":"version-1.0/start-guide/installation/system-setup-host/#checkout-autowareauto","title":"Checkout Autoware.Auto","text":"<ol> <li> <p>Get Autoware.Auto on your host.</p> <pre><code>cd ~/adehome\ngit clone https://gitlab.com/autowarefoundation/autoware.auto/AutowareAuto.git\n</code></pre> </li> </ol>"},{"location":"version-1.0/start-guide/installation/system-setup-pcu/","title":"System Setup on PCU","text":""},{"location":"version-1.0/start-guide/installation/system-setup-pcu/#overview","title":"Overview","text":"<p>This instruction explains how to perform system setup for test execution on PCU.</p> <p>You need to install Docker Engine, copy docker images and necessary files.</p>"},{"location":"version-1.0/start-guide/installation/system-setup-pcu/#access-to-pcu-via-ssh","title":"Access to PCU via SSH","text":"<pre><code>ssh user@IP-ADDRESS\n</code></pre> <p>For example;</p> <pre><code>ssh user@192.168.10.221\n</code></pre>"},{"location":"version-1.0/start-guide/installation/system-setup-pcu/#copy-autowareauto-image-to-pcu","title":"Copy Autoware.Auto image to PCU","text":"<p>NOTE: docker should be installed with post-installation steps. For instructions please refer to:</p> <ul> <li>Install Docker Engine on Ubuntu.</li> <li>Post-installation steps for Linux.</li> </ul> <p>The docker image of Autoware.Auto is registered in GitLab Container Registry. </p> <ol> <li> <p>Copy docker image to PCU.</p> <pre><code>docker pull registry.gitlab.com/autowarefoundation/autoware.auto/autowareauto/arm64/openadkit-foxy:latest\n</code></pre> </li> </ol>"},{"location":"version-1.0/start-guide/installation/system-setup-pcu/#copy-necessary-files-to-local-downloads-folder","title":"Copy necessary files to local Downloads folder","text":"<ol> <li> <p>Copy files related to map contents.</p> <p>Files are placed in the directory docs/Appendix/Open-AD-Kit-Start-Guide/map</p> <ul> <li>lanelet2_map.osm</li> <li>pointcloud_map.pcd</li> <li>global_map_center.pcd.yaml</li> <li>lanelet2_map_provider.osm.yaml</li> <li>map_publisher.param.yaml</li> </ul> <p>Copy files to your local folder (Downloads folder as example) as the following directory structure.</p> <p></p> </li> <li> <p>Copy configuration file of Cyclone DDS.</p> <p>In this test, we are using Cyclone DDS, so you also need to copy configuration file of Cyclone DDS.</p> <p>File is placed in the directory docs/Appendix/Open-AD-Kit-Start-Guide/cyclonedds</p> <ul> <li>cyclonedds.xml</li> </ul> <p>Copy the file to your local folder as the following directory structure.</p> <p></p> </li> <li> <p>Copy kernel configuration file for tuning kernel parameters.</p> <p>We have to reconfigure kernel parameters by using <code>sysctl</code> for system stability.</p> <p>File is placed in the directory docs/Appendix/Open-AD-Kit-Start-Guide/sysctl.d</p> <ul> <li>60_cyclonedds.conf</li> </ul> <p>Copy the file to your local folder.</p> </li> </ol>"},{"location":"version-1.0/start-guide/installation/system-setup-pcu/#copy-files-from-local-folder-to-pcu","title":"Copy files from local folder to PCU","text":"<ol> <li> <p>Connect your host PC with PCU through internet and copy files with SCP.</p> <ol> <li> <p>Access to PCU via SSH</p> <p>For example;</p> <pre><code>ssh user@192.168.10.221\n</code></pre> </li> <li> <p>Copy kernel configuration file to <code>/etc/sysctl.d/</code></p> <pre><code>sudo scp USER-NAME@IP-ADDRESS:/home/USER-NAME/Downloads/60_cyclonedds.conf /etc/sysctl.d/\n</code></pre> <p>For example;</p> <pre><code>sudo scp adlink@192.168.10.237:/home/adlink/Downloads/60_cyclonedds.conf /etc/sysctl.d/\n</code></pre> <p>Then type in the password of PCU (default password: user) and host PC as request.</p> </li> <li> <p>Update kernel parameters.</p> <pre><code>sudo sysctl -p /etc/sysctl.d/60_cyclonedds.conf\n</code></pre> </li> <li> <p>Copy map contents files and Cyclone DDS configuration file.</p> <pre><code>sudo scp -r USER-NAME@IP-ADDRESS:/home/adlink/Downloads/map ~/\n</code></pre> <pre><code>sudo scp -r USER-NAME@IP-ADDRESS:/home/adlink/Downloads/cyclonedds ~/\n</code></pre> </li> </ol> </li> </ol>"},{"location":"version-1.0/start-guide/installation/system-setup-pcu/#modify-cycloneddsxml","title":"Modify <code>cyclonedds.xml</code>","text":"<p>You need to change the element <code>NetworkInterfaceAddress</code> to the network interface currently in use.</p> <ol> <li> <p>Find network interface.</p> <pre><code>ip addr\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n   link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n   inet 127.0.0.1/8 scope host lo\n     valid_lft forever preferred_lft forever\n   inet6 ::1/128 scope host\n     valid_lft forever preferred_lft forever\n2: fm1-mac1: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq master br0 state DOWN group default qlen 1000\n   link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff\n   inet6 fe80::204:7cff:fe2e:190/64 scope link\n     valid_lft forever preferred_lft forever\n3: fm1-mac5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000\n   link/ether 00:04:7c:2e:01:91 brd ff:ff:ff:ff:ff:ff\n   inet 192.168.10.221/24 brd 192.168.10.255 scope global dynamic fm1-mac5\n     valid_lft 254392sec preferred_lft 254392sec\n   inet6 fe80::204:7cff:fe2e:191/64 scope link\n     valid_lft forever preferred_lft forever\n4: fm1-mac6: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq master br0 state DOWN group default qlen 1000\n   link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff\n5: fm1-sw: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq master br0 state UP group default qlen 1000\n   link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff\n   inet6 fe80::204:7cff:fe2e:190/64 scope link\n      valid_lft forever preferred_lft forever\n6: fm1-mac10: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq master br0 state DOWN group default qlen 1000\n   link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff\n7: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n   link/sit 0.0.0.0 brd 0.0.0.0\n8: br0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000\n   link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff\n   inet 192.168.1.239/24 brd 192.168.1.255 scope global br0\n     valid_lft forever preferred_lft forever\n   inet6 fe80::204:7cff:fe2e:190/64 scope link\n     valid_lft forever preferred_lft forever\n9: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default\n   link/ether 02:42:cb:aa:a6:9d brd ff:ff:ff:ff:ff:ff\n   inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n     valid_lft forever preferred_lft forever\n</code></pre> <p> You can find a network interface such as <code>fm1-mac5</code>.</p> </li> <li> <p>Change the <code>NetworkInterfaceAddress</code>.</p> <pre><code>sudo vi ~/cyclonedds/cyclonedds.xml\n</code></pre> <p>For example;  cyclonedds.xml</p> <pre><code> &lt;General&gt;\n-  &lt;NetworkInterfaceAddress&gt;lo&lt;/NetworkInterfaceAddress&gt;\n+  &lt;NetworkInterfaceAddress&gt;fm1-mac5&lt;/NetworkInterfaceAddress&gt;\n&lt;/General&gt;\n</code></pre> </li> </ol>"},{"location":"version-1.0/system-configuration/","title":"System configuration","text":"<p>TODO</p>"},{"location":"version-2.0/","title":"Open AD Kit Documentation","text":"<p>The latest version is 2.0, but it has not been officially released yet.</p>"},{"location":"version-2.0/#about-open-ad-kit","title":"About Open AD Kit","text":"<p>Open AD Kit aims to democratize autonomous drive (AD) systems by bringing the cloud and edge closer together. In doing so, Open AD Kit will lower the threshold for developing and deploying the Autoware software stack.</p> <p></p> <p>For more details about the Open AD Kit project, its goals and details of the Autoware Foundation working group that oversees the project, refer to the Open AD Kit Working Group wiki.</p>"},{"location":"version-2.0/#open-ad-kit-documentation-structure","title":"Open AD Kit documentation structure","text":""},{"location":"version-2.0/#getting-started","title":"Getting started","text":"<ul> <li>Start guide describes how to install, set up and run Autoware and its associated simulators on supported development platforms.</li> <li>System configuration describes the components that make up Open AD Kit in terms of the required hardware and software.</li> <li>Application example provides an actual application example for Open AD Kit that can be used as a reference for the development of other applications.</li> </ul>"},{"location":"version-2.0/#releases","title":"Releases","text":"<p>version 2.0 Latest</p> <p>version 1.0</p>"},{"location":"version-2.0/application-example/","title":"Application example","text":"<p>This page shows application examples of Open AD Kit version 2.0.</p> <p>TODO</p>"},{"location":"version-2.0/application-example/driverless-bus/","title":"Driverless bus","text":"<p>The content is a work in progress.</p> <p>This page provides a reference design for a passenger transportation system in the urban area. The reference design consists of the following structures:</p> <ol> <li>Introduction of Reference Design</li> <li>Concept of Operations</li> <li>Operational Concept</li> <li>Operational Environment Requirements</li> <li>System Requirements</li> <li>System Configuration</li> <li>Hardware Requirements</li> <li>Software Requirements</li> <li>Appendix</li> </ol>"},{"location":"version-2.0/application-example/driverless-bus/appendix/","title":"Appendix","text":"<p>The content is a work in progress.</p> <ul> <li>What is ConOps and OpsCons?</li> <li>Hardware List</li> </ul>"},{"location":"version-2.0/application-example/driverless-bus/appendix/hardware-list/","title":"Hardware List","text":"<p>The content is a work in progress.</p> <p>This page should show applicable hardwares for the system.</p>"},{"location":"version-2.0/application-example/driverless-bus/appendix/what-is-conops-and-opscon/","title":"What is ConOps and OpsCons?","text":"<p>Concept of Operations (ConOps): \u201c... the ConOps describes the overall high-level concept of how the system will be used to meet stakeholder expectations, usually in a time-sequenced manner\u2026\u201d, source NASA Systems Engineering Handbook</p> <p>In short, it describes how the system achieves the user\u2019s mission with a picture and short sentences.</p> <p>Operational Concept (OpsCon): \u201cThe operational concept is designed to give an overall picture of the operations using one or more specific systems, or set of related systems, in the organization\u2019s operational environment from the users\u2019 and operators\u2019 perspective.\u201d, source SEBoK</p> <p>In short, it describes:</p> <ul> <li>How the system achieves the mission using unique features/events/interactions</li> <li>Relationships between the system and other systems</li> </ul> <p>Benefits:</p> <ul> <li>Stakeholders can understand the system from the early stages of development</li> <li>In particular, developers who have different backgrounds or perspectives can gain the same understanding</li> </ul>"},{"location":"version-2.0/application-example/driverless-bus/concept-of-operations/","title":"Concept of Operations","text":""},{"location":"version-2.0/application-example/driverless-bus/concept-of-operations/#passenger-transportation-system-in-the-urban-area","title":"Passenger Transportation System in the urban area","text":"<p>The system, under the surveillance of an in-car operator, will automatically transport passengers while following routes on public roads. The public roads have multiple lanes, traffic lights, and intersections; therefore the system will automatically change lanes and respond to traffic lights at intersections. The system will automatically stop at bus stops. The system is programmed to avoid colliding with objects that are detected on the road. The vehicle is programmed to either safely pass the object when possible, or to stop. While the vehicle is moving, the system automatically maintains a safe following distance and stays within the speed limit (i.e., adaptive cruise control).</p> <p></p>"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/","title":"Hardware Requirements","text":"<p>The content is a work in progress.</p> <ol> <li>Vehicle Requirements</li> <li>ECU Requirements</li> <li>Sensor Requirements</li> </ol> <ul> <li>LiDAR Requirements</li> <li>Camera Requirements</li> <li>Radar Requirements</li> </ul>"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/","title":"ECU Requirements","text":"<p>This is a draft version.</p>"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/#overview","title":"Overview","text":"<p>The requirements described in the following pages are determined based on a Tier IV project as a reference for now. This will be updated once the requirements for Open AD Kit was determined.</p>"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/#table-of-contents","title":"Table of contents","text":"<ol> <li>High-level Architecture</li> <li>System Resource &amp; Interface</li> <li>Performance and Data Bandwidth Requirements</li> <li>Hardware Requirements</li> </ol>"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/high-level-arch/","title":"High-level Architecture","text":"<p>This is a draft version.</p>"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/high-level-arch/#overview","title":"Overview","text":"<p>The reference system consists of three parts of computing unit.</p> <ul> <li>Main Autoware</li> <li>2D Perception</li> <li>Traffic Light Recognition</li> </ul> <p>Each unit can be implemented on separated hardware units (ECUs) and, if the hardware has sufficient system resource and performance, some units can also be integrated on a single hardware unit.</p>"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/high-level-arch/#block-diagram","title":"Block Diagram","text":""},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/hw-requirements/","title":"Hardware Requirements","text":"<p>This is a draft version.</p>"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/hw-requirements/#overview","title":"Overview","text":"<p>This page describes sample requirements for hardware specification.</p> <p>NOTE: This type of hardware requirement should be differed depending on a target vehicle and changed by the industrial standard. It also needs to be determined during hardware design so might should be a part of the reference implementation.</p>"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/hw-requirements/#reliability","title":"Reliability","text":"Item Requirement Standard AEC-Q100"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/hw-requirements/#environmental","title":"Environmental","text":"Item Requirement Operating Temp e.g. -40 to 130 degree celsius Storage Temp Humidity Vibration Shock EMC"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/hw-requirements/#mechanical","title":"Mechanical","text":"Item Requirement Dimensions Weight Mounting"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/hw-requirements/#power","title":"Power","text":"Item Requirement AC/DC input supply e.g. shall input 350V DC Power Consumption e.g. shall be less 600W"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/hw-requirements/#cooling","title":"Cooling","text":"Item Requirement Liquid cooling"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/perf-data-bandwidth/","title":"Performance and Data Bandwidth Requirements","text":"<p>This is a draft version.</p>"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/perf-data-bandwidth/#overview","title":"Overview","text":"<p>This page describes required performance for the perception accelerators and data bandwidth on each sensor interface and network.</p>"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/perf-data-bandwidth/#perception-accelerators","title":"Perception Accelerators","text":"Functions Network Model Input resolution @ frame rate Required performance 3D Perception CenterPoint 55000 voxels x 20 points x 10features @10FPS per LiDAR XX TOPS 2D Perception Yolov4 608x608@10FPS per Camera XX TOPS Traffic Light Recognition MobileNet v2 SSD Lite (Detection)MobileNet v2 (Classification) 300x300@10FPS224x224@10FPS XX TOPS"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/perf-data-bandwidth/#data-bandwidth","title":"Data Bandwidth","text":"Type Configurations Data type Data Bandwidth LiDAR Input Mid-range Point cloud 37 Mbps Short-range Point cloud 26 Mbps Camera Input Perception Camera YUV422 16bit1920x1280 393 Mbps Traffic Light Recognition Camera YUV422 16bit2880x1860 857 Mbps Inter-ECU 2D Perception to Main Autoware Recognition result &amp;Compressed image data for logging 27 Mbps TLR to Main Autoware Recognition result &amp;Compressed image data for logging 59 Mbps Logging Storage Mid-range LiDAR x 4Short-range LiDAR x 4Perception Camera x 6 (Compressed)Traffic Light Recognition Camera x 1 (Compressed)Main Autoware internat topics (272Mbps) 745 Mbps"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/sys-resource-if/","title":"System Resource &amp; Interface","text":"<p>This is a draft version.</p>"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/sys-resource-if/#overview","title":"Overview","text":"<p>The following tables describe the required system resource and interface for each computing unit.</p>"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/sys-resource-if/#main-autoware-unit","title":"Main Autoware Unit","text":"Category Item Requirement Computing Resource CPU X86 8core/16thread @3.3GHz or more Memory Dual 16GB (Total 32GB), DDR4-2666 w/ ECC or more GPU 9.4 TFLOPS@FP32 or more Storage 256GB for System Volume2TB for Logging data LiDAR 100BASE-TX, 1000BASE-T Interfaces IMU CAN or RS232C GNSS 100BASE-TX Vehicle CAN Inter-ECU (2D Perception/TLR) 1000BASE-T Power CPU TDP 80 W GPU TDP 110 W Total Max 250 W"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/sys-resource-if/#2d-perception-unit","title":"2D Perception Unit","text":"<p>This table shows requirements for one camera. For multiple camera configurations, it requires more hardware units. If the hardware unit has sufficient system resource and performance, it can be integrated on a single hardware unit.</p> Category Item Requirement Computing Resource CPU Arm v8.2 8core @2.26GHz or more Memory 32GB Low-Power Double Data Rate 4x or more GPU 30 TOPS or more Storage 32GB or more Interfaces Camera Gigabit Multimedia Serial Link 2 w/ frame sync trigger or 1000BASE-T (GigE Vision) Inter-ECU (Main Autoware) 1000BASE-T Power CPU TDP xxxW GPU TDP xxxW Total Max.xxxW"},{"location":"version-2.0/application-example/driverless-bus/hardware-requirements/ecu-requirements/sys-resource-if/#traffic-light-recognition-unit","title":"Traffic Light Recognition Unit","text":"<p>This table shows requirements for one camera. For multiple camera configurations, it requires more hardware units. If the hardware unit has sufficient system resource and performance, it can be integrated on a single hardware unit.</p> Category Item Requirement Computing Resource CPU Arm v8.2 8core @2.26GHz or more Memory 32GB Low-Power Double Data Rate 4x or more GPU 30 TOPS or more Storage 32GB or more Interfaces Camera Gigabit Multimedia Serial Link 2 w/ frame sync trigger or 1000BASE-T (GigE Vision) Inter-ECU (Main Autoware) 1000BASE-T Power CPU TDP xxxW GPU TDP xxxW Total Max.xxxW"},{"location":"version-2.0/application-example/driverless-bus/introduction-of-reference-design/","title":"Introduction of Reference Design","text":""},{"location":"version-2.0/application-example/driverless-bus/introduction-of-reference-design/#introduction","title":"Introduction","text":""},{"location":"version-2.0/application-example/driverless-bus/introduction-of-reference-design/#autonomous-driving-technology","title":"Autonomous driving technology","text":"<p>AWF aims to establish a sustainable ecosystem for autonomous driving to which various organizations and individuals can contribute in terms of development, and wherein society can enjoy the benefits. AWF offers open access to technologies contributing to autonomous driving.</p> <p>Autonomous driving requires a composite platform which integrates various software, cloud infrastructure and services in addition to the in-vehicle AD ( Autonomous Driving ) systems. There is a need for a horizontally collaborative development approach based on an open source platform that ensures a level of safety that satisfies society at a reasonable cost. In order to realize this, AWF is promoting (1) Autoware, an open source autonomous driving software, (2) AD System Reference Designs based on ODD ( Operational Design Domain \uff09categorization, and (3) Deep-tech R&amp;D of AD systems.</p>"},{"location":"version-2.0/application-example/driverless-bus/introduction-of-reference-design/#what-can-do-with-reference-design-as-ecosystem","title":"What can do with \"Reference Design\" as ecosystem?","text":"<p>With clear ODD classifications, everyone can understand where AD fits into complex real-world traffic environments. By presenting a suitable \"Reference Design\" for each ODD, AWF simplifies the preparation process in AD and lowers the difficulty threshold for demonstration and implementation.</p>"},{"location":"version-2.0/application-example/driverless-bus/operational-concept/","title":"Operational Concept","text":"<p>Operational Concept (OpsCon) of the Passenger Transportation System in the urban area is below:</p> <ol> <li>Daytime operation</li> <li>Nighttime operation</li> <li>Follow a route</li> <li>Let passengers on and off at bus stops</li> <li>Avoid collisions</li> <li>Set service route via HMI on the vehicle</li> <li>Interact with other vehicles on the public roads</li> <li>Interact with emergency vehicles</li> <li>Interact with traffic lights</li> <li>Operation mode</li> <li>Take over request to the operator</li> <li>Lane keeping and changing lanes</li> <li>Adaptive cruise control</li> <li>Predict pedestrian stepping into the road</li> </ol>"},{"location":"version-2.0/application-example/driverless-bus/operational-concept/adaptive-cruise-control/","title":"Adaptive cruise control","text":"<p>The system automatically maintains a safe following distance and stays within the speed limit.</p> <p></p>"},{"location":"version-2.0/application-example/driverless-bus/operational-concept/avoid-collisions/","title":"Avoid collisions","text":"<p>When there are objects on the route, the system will automatically perform the following actions:</p> <p>a. The system automatically stops if there is surrounding traffic.</p> <p>b. The system automatically avoids the objects if there is no surrounding traffic.</p> <p></p>"},{"location":"version-2.0/application-example/driverless-bus/operational-concept/daytime-operation/","title":"Daytime operation","text":"<p>Currently, the system does NOT operate in the daytime.</p> <p>In the future, the system will be able to operate during the daytime (9:30am - 3:30pm).</p> <p>The vehicle will be fully charged before the operation in the daytime.</p> <p></p>  The operator connects the charger to the vehicle, and the vehicle is automatically charged."},{"location":"version-2.0/application-example/driverless-bus/operational-concept/follow-a-route/","title":"Follow a route","text":"<p>The system follows a route set on the public road while an in-car operator is in the autonomous driving vehicle of the system.</p> <p></p>"},{"location":"version-2.0/application-example/driverless-bus/operational-concept/interact-with-emergency-vehicles/","title":"Interact with emergency vehicles","text":"<p>When the vehicle meets an emergency vehicle, an in-car operator performs the following actions:</p> <ul> <li>Promptly maneuvers the vehicle to the side of the road and stops</li> <li>Manually re-launches the system after the emergency vehicle passes by</li> <li>NOTE: The operator can use HMI (e.g., steering wheel or brake pedal) at any time to override the system control.</li> </ul> <p></p>"},{"location":"version-2.0/application-example/driverless-bus/operational-concept/interact-with-other-vehicle-on-the-public-roads/","title":"Interact with other vehicles on the public roads","text":"<p>The service route uses public roads, so the system interacts with other vehicles and must obey all traffic laws.</p> <p>When the vehicle approaches an intersection, the system is programed to yield and take right of way with surrounding traffic, depending the actual situation and traffic laws.</p> <p></p>"},{"location":"version-2.0/application-example/driverless-bus/operational-concept/interact-with-traffic-lights/","title":"Interact with traffic lights","text":"<p>When the vehicle meets a traffic light, the system performs one of the following actions:</p> <ul> <li>Stop on a red light</li> <li>Stop on a yellow light</li> <li>Go straight, turn right, or turn left on a green light or arrow</li> </ul> <p></p>"},{"location":"version-2.0/application-example/driverless-bus/operational-concept/lane-keeping-and-changing-lanes/","title":"Lane keeping and changing lanes","text":"<p>The system stays the driving lane or changes lanes according to the route.</p> <p></p>"},{"location":"version-2.0/application-example/driverless-bus/operational-concept/let-passengers-on-and-off-at-bus-stops/","title":"Let passengers on and off at bus stops","text":"<p>The system stops at bus stops set by the in-car operator.</p> <p>The in-car operator manually opens and closes the door of the vehicle to let passengers on and off at bus stops due to the local government\u2019s request.</p> <p>After the in-car operator requests the system to depart, the system automatically resumes driving along the route.</p> <p></p>"},{"location":"version-2.0/application-example/driverless-bus/operational-concept/nighttime-operation/","title":"Nighttime operation","text":"<p>During the nighttime (10pm - 1am), an in-car operator drives the vehicle from a parking lot to a start position and manually launches the autonomous driving system via HMI in the vehicle.</p> <p>The system starts moving automatically on a route set by the in-car operator.</p> <p>The in-car operator is while the system automatically operates.</p> <p></p>"},{"location":"version-2.0/application-example/driverless-bus/operational-concept/operation-mode/","title":"Operation mode: Automatic/Manual","text":"<p>The in-car operator manually launches the autonomous driving system, which causes the system to start the autonomous driving.</p> <p>If the fail safe system in the vehicle detects malfunctions or the in-car operator presses the button on the fail safe system, the system automatically changes the operation mode from automatic to manual. Then the vehicle automatically stops.</p>"},{"location":"version-2.0/application-example/driverless-bus/operational-concept/predict-pedestrian-stepping-into-the-road/","title":"Predict pedestrian stepping into the road","text":"<p>The vehicle is programmed to detect pedestrians who may step into the road, and the vehicle decelerates in response.</p> <p></p>"},{"location":"version-2.0/application-example/driverless-bus/operational-concept/set-service-route-via-HMI-on-the-vehicle/","title":"Set service route via HMI on the vehicle","text":"<p>The operator can set authorized service routes of the system via the Human Machine Interface (HMI) on the vehicle before the operation.</p> <p>The system can only accept a modified route while the vehicle is parked.</p> <p>NOTE: the service route cannot be changed without the authorization from the local government.</p>"},{"location":"version-2.0/application-example/driverless-bus/operational-concept/take-over-request-to-the-operator/","title":"Take over request to the operator","text":"<p>When the system cannot judge whether it can move forward, the system sends a recommendation to hand over operation to the in-car operator.</p> <p>The operator is supposed to perform the following actions when requested by the system:</p> <ul> <li>Request to depart\uff08refer to Let passengers on and off at bus-stops\uff09</li> <li>Avoid objects</li> <li>Detour</li> </ul> <p></p>"},{"location":"version-2.0/application-example/driverless-bus/operational-environment-requirement/","title":"Operational Environment Requirements","text":"<p>The content is a work in progress.</p>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/","title":"Software Requirements","text":"<p>The content is a work in progress.</p> <ol> <li>Operating System Requirements</li> </ol> <ul> <li>Kernel Module Requirements</li> </ul> <ol> <li>Middleware Requirements</li> </ol> <ul> <li>DDS Requirements</li> </ul> <ol> <li>Map Requirements</li> <li>Design docs of Autoware</li> </ol> <ul> <li>Autoware API</li> <li>Component Architecture</li> <li>Repository Configuration</li> </ul>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/autoware-api/","title":"Autoware API","text":""},{"location":"version-2.0/application-example/driverless-bus/software-requirements/autoware-api/#overview","title":"Overview","text":"<p>Autoware API provides a long-term and stable operation protocol for autonomous driving vehicles, and clarifies how to support new sensors and vehicles and add new features. It also works as a framework for easy access to the functions of each component by developers of other components.</p>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/autoware-api/#concept","title":"Concept","text":"<p>There are two categories of Autoware API. One is Autoware AD API for operating the vehicle from outside the autonomous driving system such as Fleet Management System(FMS) and HMI for operators or passengers. The other is Autoware Component Interfaces for linking each internal component. Some external systems for evaluation or debugging purposes, such as simulator, are allowed access to Component Interfaces in addition to AD API.</p> <p></p>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/autoware-api/#ad-api-customization","title":"AD API Customization","text":"<p>For general usage, Autoware provides the default AD API implementations and configurations using Component Interfaces. If a special behavior is needed, the implementation can be modified as long as it satisfies the requirements of the specification.</p> <p></p>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/autoware-api/#component-interfaces-hierarchy","title":"Component Interfaces Hierarchy","text":"<p>Autoware Component Interfaces have a hierarchical specification. The top-level architecture consists of several components, and each component has some options of the next-level architecture. Developers select one of them when implementing the component. The simplest next-level architecture is monolithic. This is an all-in-one and black box implementation, and is suitable for small group development, prototyping, and extremely complex functions. Others are just concepts and do not currently exist. However, these have advantages for large group development. Developers can combine their modules with other modules that adopt the same architecture.</p> <p></p>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/autoware-api/#interface-code-generation","title":"Interface Code Generation","text":"<p>For specification clarification and development efficiency, it is recommended to use the generated code by the defined interface. Developers may select the interface to use from the specification and refer the generated code in their program. This makes it easy to analyze the interface used by each program, which then can be applied to configuration automation and visualization.</p> <p></p>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/component-architecture/","title":"Component architecture","text":""},{"location":"version-2.0/application-example/driverless-bus/software-requirements/component-architecture/#overview","title":"Overview","text":"<p>The figure below is the overview of Autoware's component configuration (tentative).</p> <p></p>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/component-architecture/#autoware-components","title":"Autoware components","text":"<p>TODO(Tier IV): Write the details based on the following materials.</p> <ul> <li>Autoware.Auto</li> <li>autoware_auto_msgs</li> <li>Tier IV's proposal document</li> <li>Tier IV's proposal implementation</li> </ul>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/component-architecture/#map","title":"Map","text":"<p>Inputs:</p> <ul> <li>Map file<ul> <li>PointCloud map file</li> <li>Vector map file</li> </ul> </li> </ul> <p>Outputs:</p> <ul> <li>Map data<ul> <li>PointCloud map file</li> <li>Vector map file</li> </ul> </li> </ul>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/component-architecture/#sensing","title":"Sensing","text":"<p>Inputs:</p> <ul> <li>Raw sensor data<ul> <li>GNSS</li> <li>IMU</li> <li>Camera</li> <li>LiDAR</li> <li>RADAR</li> </ul> </li> <li>Estimated self motion<ul> <li>To filter distortions</li> </ul> </li> </ul> <p>Outputs:</p> <ul> <li>Preprocessed sensor data<ul> <li>GNSS pose and doppler velocity</li> <li>IMU acceleration and angular velocity</li> <li>Camera image</li> <li>LiDAR PointCloud</li> <li>RADAR reflection</li> </ul> </li> </ul>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/component-architecture/#localization","title":"Localization","text":"<p>Inputs:</p> <ul> <li>Preprocessed sensor data<ul> <li>GNSS pose and doppler velocity</li> <li>IMU acceleration and angular velocity</li> <li>Camera image</li> <li>LiDAR PointCloud</li> <li>RADAR reflection</li> </ul> </li> <li>Map data<ul> <li>PointCloud map</li> <li>Vector map</li> </ul> </li> </ul> <p>Outputs:</p> <ul> <li>Localized self pose<ul> <li>Topic</li> <li>TF</li> </ul> </li> <li>Estimated self motion</li> </ul>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/component-architecture/#perception","title":"Perception","text":"<p>Inputs:</p> <ul> <li>Localized self pose</li> <li>Estimated self motion</li> <li>Preprocessed sensor data<ul> <li>Camera image</li> <li>LiDAR PointCloud</li> <li>RADAR reflection</li> </ul> </li> </ul> <p>Outputs:</p> <ul> <li>Detected dynamic objects</li> <li>Detected traffic lights</li> <li>Filtered obstacle PointCloud</li> </ul>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/component-architecture/#planning","title":"Planning","text":"<p>Inputs:</p> <ul> <li>Localized pose</li> <li>Estimated self motion</li> </ul> <p>Outputs:</p> <ul> <li>Planned trajectory</li> <li>Planning status</li> </ul>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/component-architecture/#control","title":"Control","text":"<p>Inputs:</p> <ul> <li>Localized self pose</li> <li>Estimated self motion</li> <li>Planner trajectory</li> <li>Vehicle sensor data<ul> <li>velocity</li> <li>steering angle</li> </ul> </li> </ul> <p>Outputs:</p> <ul> <li>Control commands<ul> <li>High-level commands for easy usage</li> <li>Low-level commands for detailed controls</li> </ul> </li> </ul>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/component-architecture/#vehicle","title":"Vehicle","text":""},{"location":"version-2.0/application-example/driverless-bus/software-requirements/component-architecture/#autoware-to-vehicle","title":"Autoware to Vehicle","text":"<p>Inputs:</p> <ul> <li>Control commands</li> </ul> <p>Outputs:</p> <ul> <li>Raw vehicle control commands</li> </ul>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/component-architecture/#vehicle-to-autoware","title":"Vehicle to Autoware","text":"<p>Inputs:</p> <ul> <li>Raw vehicle sensor data (e.g. CAN)</li> </ul> <p>Outputs:</p> <ul> <li>Vehicle sensor data (Topic)</li> </ul>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/component-architecture/#system","title":"System","text":"<p>Inputs:</p> <ul> <li>Each component output</li> </ul> <p>Outputs:</p> <ul> <li>System status</li> <li>MRM request</li> </ul>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/design-docs-of-autoware/","title":"Design docs of Autoware","text":"<p>In this section, we'll explain a couple of design documents of Autoware.</p> <p>The first one is about <code>Autoware API</code>. It defines two kinds of APIs for different developers.</p> <ol> <li><code>Autoware AD API</code> for developers of external systems such as fleet management HMI, etc.<ul> <li>AD means Autonomous Driving.</li> </ul> </li> <li><code>Autoware Component Interface</code> for developers of Autoware components such as Localization, Perception, etc.</li> </ol> <p>The second one is about the architecture of Autoware components. It explains the interface between Autoware components in detail.</p> <p>The last one is about the repository configuration of Autoware, which is currently used here. It explains why such a distributed structure is necessary.</p>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/repository-configuration/","title":"Repository configuration","text":""},{"location":"version-2.0/application-example/driverless-bus/software-requirements/repository-configuration/#overview","title":"Overview","text":"<p>This page shows the repository configuration of Autoware and its concepts.</p> <p>Warning</p> <p>Note: This figure is tentative.</p> <p>TODO: Add documentations repositories, WG repositories, and autoware.org.</p> <p></p>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/repository-configuration/#concepts","title":"Concepts","text":""},{"location":"version-2.0/application-example/driverless-bus/software-requirements/repository-configuration/#coreuniverse-architecture","title":"Core/Universe architecture","text":"<p>Since Autoware is desired to be usable for production-level vehicles in the future, Autoware.Auto has been used strict merge criteria.</p> <p>However, since there is no specific requirements or specifications in Autonomous Driving, it's almost impossible to build a perfect product from the beginning. We need prototyping phases to build a high-quality product, so we're doing ODD-based developments.</p> <p>Then, doing every development in one branch causes slowing down of development speed or mixin of low-quality. Also, forcing such a strict rules for all contributors will make them discourage from sending PRs.</p> <p>Therefore, it's better to separate production level and high-quality code and prototyping level code. Specifically, we define Core/Universe for this.</p> <ul> <li>Core defines the interfaces of Autoware</li> <li>Both Core and Universe refer to the interface</li> <li>Core has high-quality code</li> <li>Universe has experimental level code</li> </ul> <p>With this, we aim to accomplish the following things.</p> <ul> <li>Contributors can feel free to send small PRs.</li> <li>We can keep high-quality for the Core code.</li> <li>We can rapidly build prototypes in Universe.</li> <li>We can develop a lot of extensions, including cutting-edge features, based on the interfaces.</li> </ul>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/repository-configuration/#definition-of-coreuniverse","title":"Definition of Core/Universe","text":"<p>Core</p> <ul> <li>Complete end-to-end autonomous driving framework</li> <li>Supports all current AWF ODDs</li> <li>Provides the definitions and the functionality for which other packages can extend</li> <li>Strict code and quality control</li> <li>Heavily managed by the AWF</li> <li>Stable base implementation</li> </ul> <p>Universe</p> <ul> <li>Additional packages built on top of Core</li> <li>Extends Autoware functionality beyond the AWF ODDs</li> <li>Completely dependent on Core functionality and message definitions</li> <li>Relaxed code and quality control</li> <li>Community managed</li> <li>Enables quick experimentation and prototype testing</li> </ul>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/repository-configuration/#repositories-and-roles","title":"Repositories and roles","text":"<p>Although some repositories might be added in the future, these are enough for explaining the core concept.</p> <ul> <li>autowarefoundation/autoware<ul> <li>This is a meta-repository that contains <code>.repos</code> files to construct a workspace.</li> <li>Since it's prospected to be forked by users, we don't put a lot of information here to avoid unnecessary differences.</li> </ul> </li> <li>autowarefoundation/autoware_common<ul> <li>This is a repository that contains ROS packages referenced in common by many repositories like libraries and utilities.</li> <li>In order to reduce the CI execution time, splitting that kind of packages from a big repository is a good practice.</li> </ul> </li> <li>autowarefoundation/autoware.core<ul> <li>This is a core repository that contains high-quality and stable ROS packages for Autonomous Driving.</li> <li>Although it's almost empty at this time, it will be implemented based on Autoware.Auto and Autoware.Universe during the next ODD project.</li> </ul> </li> <li>autowarefoundation/autoware.universe<ul> <li>This is a core repository that contains experimental but cutting-edge ROS packages for Autonomous Driving.</li> </ul> </li> <li>autowarefoundation/autoware_launch<ul> <li>This is a launch configuration repository that contains node configurations and their parameters.</li> </ul> </li> <li>autowarefoundation/autoware-github-actions<ul> <li>This is a repository for CI that contains reusable workflows of GitHub Actions.</li> <li>Since Autoware has a lot of repositories in total, making CI scripts DRY(Don't Repeat Yourself) is efficient.</li> </ul> </li> <li>autowarefoundation/autoware-documentation<ul> <li>This is a documentation repository for Autoware users and developers.</li> <li>Since Autoware Core/Universe has multiple repositories, preparing a central documentation repository is more user-friendly than writing distributed documentation in each repository.</li> </ul> </li> </ul>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/repository-configuration/#faq","title":"FAQ","text":""},{"location":"version-2.0/application-example/driverless-bus/software-requirements/repository-configuration/#why-dont-use-the-meta-repository-for-documentation","title":"Why don't use the meta-repository for documentation?","text":"<p>Since it's forked by many users, documentation changes would be noise during syncing repositories.</p>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/repository-configuration/#why-autowareorg-isnt-enough-for-documentation","title":"Why autoware.org isn't enough for documentation?","text":"<p>Since Software Engineers can't maintain it easily, it's hard to write a lot of information and keep up-to-date.</p>"},{"location":"version-2.0/application-example/driverless-bus/software-requirements/repository-configuration/#why-both-autoware-documentation-and-autoware-reference-design-this-site-are-required","title":"Why both <code>autoware-documentation</code> and <code>autoware-reference-design (this site)</code> are required?","text":"<p>It's for a kind of separation of concerns. Too much information on one site makes confusion.</p> <ul> <li><code>autoware-documentation</code> is mainly for users.</li> <li><code>autoware-reference-design</code> is for core developers.</li> </ul>"},{"location":"version-2.0/application-example/driverless-bus/system-configuration/","title":"System Configuration","text":"<p>The content is a work in progress.</p> <p>This chapter should show the physical configuration of the system.</p>"},{"location":"version-2.0/application-example/driverless-bus/system-requirements/","title":"System Requirements","text":"<p>The content is a work in progress.</p> <p>This chapter should show requirements for the system of interest and its sub-systems.</p> <ul> <li>Parity Requirements</li> </ul>"},{"location":"version-2.0/application-example/driverless-bus/system-requirements/parity-requirements/","title":"Parity","text":""},{"location":"version-2.0/application-example/driverless-bus/system-requirements/parity-requirements/#importance-of-the-parity-in-the-verification-of-autonomous-driving-systems","title":"Importance of the parity in the verification of autonomous driving systems","text":"<p>One of the most important points in the verification process of the autonomous driving system is the guaranteed level of the parity between the edge (onboard) and the cloud (CI /CD) environment. Various types of the parity and the information that is useful in the verification architecture taking the parity into consideration \u3000 are explained.</p>"},{"location":"version-2.0/application-example/driverless-bus/system-requirements/parity-requirements/#parity-types","title":"Parity types","text":""},{"location":"version-2.0/application-example/driverless-bus/system-requirements/parity-requirements/#device-parity","title":"Device Parity","text":"<p>The parity of the hardware (machines). When using the public cloud, as the device variation available on the public cloud is generally limited, it is difficult to guarantee this device parity.</p>"},{"location":"version-2.0/application-example/driverless-bus/system-requirements/parity-requirements/#cpu-architecture-parity","title":"CPU Architecture Parity","text":"<p>The parity of the processor implementation including the microservice architecture and the clock speed, etc.</p>"},{"location":"version-2.0/application-example/driverless-bus/system-requirements/parity-requirements/#isa-parity","title":"ISA Parity","text":"<p>The ISA (Instruction Set Architecture) Parity is different from the CPU Architecture Parity. It means the parity of the available register resource, instruction set, and the calculation functionality, where the processor implementation is abstracted.</p>"},{"location":"version-2.0/application-example/driverless-bus/system-requirements/parity-requirements/#runtime-parity","title":"Runtime Parity","text":"<p>The Runtime Parity means the parity of the kernel module and the container runtime, where the built result at the application level is guaranteed to run flawlessly.</p> <p>However, depending on the implementation, some modules do not run even if the Runtime Parity is secured. For example, the object detection module which is optimized for a GPU model.</p>"},{"location":"version-2.0/application-example/driverless-bus/system-requirements/parity-requirements/#environment-parity","title":"Environment Parity","text":"<p>The Environment Parity means the parity of the network configuration, set of frameworks and libraries of the autonomous driving system applications.</p>"},{"location":"version-2.0/application-example/driverless-bus/system-requirements/parity-requirements/#parity-and-cloud-native-devops","title":"Parity and Cloud Native DevOps","text":"<p>In autonomous driving system verification, it is important to conduct the necessary tests by understanding what level of parity is guaranteed for the verification environment compared to the vehicle environment.</p> <p>On the other hand, in case that the public cloud is used as a cloud native environment, the Device Parity may not be fulfilled. Depending on the choice of the chip, the CPU Architecture Parity or the ISA Parity may not be met.</p> <p>It is crucial to conduct tests in the bench environment while improving the development experience by executing the sufficient number of tests in a short time period in a cloud native manner.</p>"},{"location":"version-2.0/start-guide/","title":"Start guide","text":"<p>This page describes how to install, set up and run Autoware and its associated simulators on supported development platforms.</p> <ol> <li>Installation explains how to set up the development environment that are described in the System Configuration chapter.</li> <li>How to run Autoware shows how to run Autoware on the development platform that are set up in the Installation chapter.</li> <li>How to run simulators demonstrates how to run simulators that are set up in the Installation chapter.</li> </ol>"},{"location":"version-2.0/start-guide/how-to-run-autoware/","title":"How to run Autoware","text":"<p>This page explains how to run Autoware on the development platform that are set up in the Installation chapter.</p>"},{"location":"version-2.0/start-guide/how-to-run-autoware/#minimum-requirements","title":"Minimum requirements","text":"<ul> <li>Developer Platform: TODO</li> <li>In-Vehicle Development Platform 1: TODO</li> <li>Software Tool: TODO</li> <li>Container Image: TODO</li> </ul>"},{"location":"version-2.0/start-guide/how-to-run-autoware/#1-run-autoware-on-the-developer-platform","title":"1. Run Autoware on the developer platform","text":""},{"location":"version-2.0/start-guide/how-to-run-autoware/#run-autowareauto-on-ava-platform-or-pcu-or-xavier","title":"Run Autoware.Auto on AVA platform or PCU or Xavier","text":"<ol> <li> <p>Access AVA platform or PCU or Xavier via SSH.</p> </li> <li> <p>Deploy kubernetes clusters for Autoware.</p> <pre><code>kubectl apply -f comhpc-deployments\n</code></pre> <p> You can make sure deployments are deployed.</p> <pre><code>root@comhpc:~# kubectl get deploy -o wide\nNAME               READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES                                                                         SELECTOR\ncomhpc-control     1/1     1            1           15h   comhpc       ghcr.io/autowarefoundation/autoware-universe:galactic-20220728-prebuilt-cuda   io.kompose.service=comhpc\ncomhpc-api         1/1     1            1           15h   comhpc       ghcr.io/autowarefoundation/autoware-universe:galactic-20220728-prebuilt-cuda   io.kompose.service=comhpc\ncomhpc-planning    1/1     1            1           15h   comhpc       ghcr.io/autowarefoundation/autoware-universe:galactic-20220728-prebuilt-cuda   io.kompose.service=comhpc\ncomhpc-simulator   1/1     1            1           15h   comhpc       ghcr.io/autowarefoundation/autoware-universe:galactic-20220728-prebuilt-cuda   io.kompose.service=comhpc\ncomhpc-map         1/1     1            1           15h   comhpc       ghcr.io/autowarefoundation/autoware-universe:galactic-20220728-prebuilt-cuda   io.kompose.service=comhpc\ncomhpc-system      1/1     1            1           17h   comhpc       ghcr.io/autowarefoundation/autoware-universe:galactic-20220728-prebuilt-cuda   io.kompose.service=comhpc\ncomhpc-vehicle     1/1     1            1           17h   comhpc       ghcr.io/autowarefoundation/autoware-universe:galactic-20220728-prebuilt-cuda   io.kompose.service=comhpc\n</code></pre> <p> Please make sure all pods are running.</p> <pre><code>root@comhpc:~# kubectl get pod -o wide\nNAME                                READY   STATUS    RESTARTS   AGE    IP              NODE   NOMINATED NODE   READINESS GATES\ncomhpc-control-58cb5b9dbd-fqckv     1/1     Running   0          104m   192.168.10.27   ava    &lt;none&gt;           &lt;none&gt;\ncomhpc-api-7b588f7988-n4rb7         1/1     Running   0          103m   192.168.10.27   ava    &lt;none&gt;           &lt;none&gt;\ncomhpc-planning-d964b9646-92rzc     1/1     Running   0          104m   192.168.10.27   ava    &lt;none&gt;           &lt;none&gt;\ncomhpc-simulator-7f5b9fb97d-7kvqm   1/1     Running   0          104m   192.168.10.27   ava    &lt;none&gt;           &lt;none&gt;\ncomhpc-map-7867476c98-mgrm5         1/1     Running   0          103m   192.168.10.27   ava    &lt;none&gt;           &lt;none&gt;\ncomhpc-system-c5599d5b-xxhg2        1/1     Running   0          103m   192.168.10.27   ava    &lt;none&gt;           &lt;none&gt;\ncomhpc-vehicle-9d6b5b9b8-k95q9      1/1     Running   0          103m   192.168.10.27   ava    &lt;none&gt;           &lt;none&gt;\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/how-to-run-autoware/#2-run-autoware-on-the-in-vehicle-development-platform","title":"2. Run Autoware on the in-vehicle development platform","text":"<p>If you do NOT need a vehicle-edge platform, please skip this step.</p> <p>TODO</p>"},{"location":"version-2.0/start-guide/how-to-run-autoware/#3-run-simulators-on-the-development-platform","title":"3. Run simulators on the development platform","text":"<p>Please refer to the How to run simulators section.</p>"},{"location":"version-2.0/start-guide/how-to-run-autoware/#4-run-centerpoint-object-detection-simultaneously-on-the-development-platform","title":"4. Run centerpoint object detection simultaneously on the development platform","text":"<p>Please refer to the tutorial</p> <ol> <li> <p>This is optional if you do NOT need a vehicle-edge platform.\u00a0\u21a9</p> </li> </ol>"},{"location":"version-2.0/start-guide/how-to-run-simulators/","title":"How to run simulators","text":"<p>This page describes how to run simulators that work on your local environment and the cloud environment.</p> <ul> <li>Scenario simulator verifies your planning algorithms.</li> <li>Logging simulator verifies your perception algorithms with ROSBAG data that are recorded beforehand.</li> </ul> <ul> <li>Troubleshooting</li> <li>Limitations and issues</li> </ul>"},{"location":"version-2.0/start-guide/how-to-run-simulators/limitations-and-issues/limitations-and-issues/","title":"Limitations and issues","text":""},{"location":"version-2.0/start-guide/how-to-run-simulators/limitations-and-issues/limitations-and-issues/#limitations","title":"Limitations","text":""},{"location":"version-2.0/start-guide/how-to-run-simulators/limitations-and-issues/limitations-and-issues/#issues","title":"Issues","text":""},{"location":"version-2.0/start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/","title":"Run on the cloud platform","text":"<p>This page describes how to run the logging simulator on the cloud platform.</p> <p>The cloud platform, Web.Auto, is offered by TIER IV, and it is available for the Autoware Foundation members.</p>"},{"location":"version-2.0/start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/#minimum-requirements","title":"Minimum requirements","text":"<ul> <li>Developer Platform: TODO</li> <li>In-Vehicle Development Platform 1: TODO</li> <li>Software Tool: TODO</li> <li>Container Image: TODO</li> <li>Data Pipeline: TODO</li> </ul>"},{"location":"version-2.0/start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/#1-create-your-account-on-the-cloud-platform","title":"1. Create your account on the cloud platform","text":"<p>If you already have access to Web.Auto, please skip this step.</p> <p>TODO</p>"},{"location":"version-2.0/start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/#2-set-up-a-simulation-on-the-cloud-platform","title":"2. Set up a simulation on the cloud platform","text":"<p>TODO</p>"},{"location":"version-2.0/start-guide/how-to-run-simulators/logging-simulator/run-on-cloud-env/#3-run-the-logging-simulator-on-the-cloud-platform","title":"3. Run the logging simulator on the cloud platform","text":"<p>TODO</p> <ol> <li> <p>This is optional if you do NOT need a vehicle-edge platform.\u00a0\u21a9</p> </li> </ol>"},{"location":"version-2.0/start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/","title":"Run on the cloud platform","text":"<p>This page describes how to run the scenario simulator on the cloud platform.</p> <p>The cloud platform, Web.Auto, is offered by TIER IV, and it is available for the Autoware Foundation members.</p>"},{"location":"version-2.0/start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#minimum-requirements","title":"Minimum requirements","text":"<ul> <li>Developer Platform: TODO</li> <li>In-Vehicle Development Platform 1: TODO</li> <li>Software Tool: TODO</li> <li>Container Image: TODO</li> <li>Data Pipeline: TODO</li> </ul>"},{"location":"version-2.0/start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#1-create-your-account-on-the-cloud-platform","title":"1. Create your account on the cloud platform","text":"<p>If you already have access to Web.Auto, please skip this step.</p>"},{"location":"version-2.0/start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#cloud-native-cicd-pipeline-webauto","title":"Cloud Native CI/CD Pipeline - Web.Auto","text":"<p>The CI/CD pipeline for the scenario simulation is available for the Autoware Foundation members.</p> <p>You can check the scenario simulation results on the CI/CD dashboard.</p> <p>This material describes the CI/CD pipeline in more details.</p> <ol> <li>Create an account with Tier IV account server (https://account.tier4.jp/).</li> <li>Participate in an Autoware Foundation working group (Simulation, Autonomy Software, Operational Design DomainD, Open AD Kit) and report the Tier IV Account ID you created in 1. to the leader of your working group.</li> <li>Then you can login to the CI/CD dashboard and see the scenario simulation results.</li> </ol>"},{"location":"version-2.0/start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#2-set-up-a-simulation-on-the-cloud-platform","title":"2. Set up a simulation on the cloud platform","text":"<p>TODO</p>"},{"location":"version-2.0/start-guide/how-to-run-simulators/scenario-simulator/run-on-cloud-env/#3-run-the-scenario-simulator-on-the-cloud-platform","title":"3. Run the scenario simulator on the cloud platform","text":"<p>TODO</p> <ol> <li> <p>This is optional if you do NOT need a vehicle-edge platform.\u00a0\u21a9</p> </li> </ol>"},{"location":"version-2.0/start-guide/how-to-run-simulators/scenario-simulator/run-on-local-env/","title":"Run on your local environment","text":"<p>This page describes how to run the scenario simulator on the developer platform that is set up in the Installation chapter.</p>"},{"location":"version-2.0/start-guide/how-to-run-simulators/scenario-simulator/run-on-local-env/#minimum-requirements","title":"Minimum requirements","text":"<ul> <li>Developer Platform: TODO</li> <li>In-Vehicle Development Platform 1: TODO</li> <li>Software Tool: TODO</li> <li>Container Image: TODO</li> <li>Data Pipeline: TODO</li> </ul>"},{"location":"version-2.0/start-guide/how-to-run-simulators/scenario-simulator/run-on-local-env/#run-scenario-simulator-on-the-developer-platform","title":"Run scenario simulator on the developer platform","text":"<ol> <li> <p>Launch scenario simulator.</p> <pre><code>rocker --x11 --home --network host --privileged ghcr.io/tier4/scenario_simulator_v2:galactic ros2 launch scenario_test_runner scenario_test_runner.launch.py scenario:=$HOME/Downloads/sample_data/t4v2.yaml architecture_type:=awf/universe launch_rviz:=true launch_autoware:=false record:=false timeout:=60.0\n</code></pre> <p> Please specify the path to your scenario file.</p> <pre><code>scenario:=$HOME/Downloads/sample_data/t4v2.yaml\n</code></pre> </li> </ol> <p>Now you can see...</p> <p>DEMO Video</p> <p></p> <ol> <li> <p>This is optional if you do NOT need a vehicle-edge platform.\u00a0\u21a9</p> </li> </ol>"},{"location":"version-2.0/start-guide/how-to-run-simulators/troubleshooting/troubleshooting/","title":"Troubleshooting","text":""},{"location":"version-2.0/start-guide/how-to-run-simulators/troubleshooting/troubleshooting/#scenario-simulator-stacks-with-simulator-waiting-for-autoware-state-to-be-initializing","title":"Scenario simulator stacks with <code>Simulator waiting for Autoware state to be Initializing</code>","text":""},{"location":"version-2.0/start-guide/how-to-run-simulators/troubleshooting/troubleshooting/#workaround","title":"Workaround","text":"<p>Please restart kubernetes pods on the AVA Platform using the</p> <pre><code>kubectl get deploy --output name | grep comhpc | xargs -n1 kubectl rollout restart\n</code></pre>"},{"location":"version-2.0/start-guide/installation/","title":"Installation","text":"<p>This page explains how to set up the development environment that are described in the System Configuration chapter.</p> <p>The following contents are diverted from Open AD Kit version 1.0. These contents will be updated for Open AD Kit version 2.0.</p>"},{"location":"version-2.0/start-guide/installation/#minimum-requirements","title":"Minimum requirements","text":"<ul> <li>Developer Platform:<ul> <li>AVA Platform or PCU Platform or Xavier Platform</li> </ul> </li> <li>In-Vehicle Development Platform 1: TODO</li> <li>Software Tool:<ul> <li>Scenario simulator version 0.6.5+ 2</li> <li>Rviz version 8.5.1 2</li> </ul> </li> <li>Container Image:<ul> <li>Autoware.Universe for arm64</li> <li>Scenario simulator for x86_64 2</li> </ul> </li> </ul> <p>The following diagram shows a minimum configuration of Open AD Kit. \"Your host machine\" will be replaced by the cloud development platform if you can use Web.Auto.</p> <p></p>"},{"location":"version-2.0/start-guide/installation/#1-set-up-the-developer-platform","title":"1. Set up the developer platform","text":"<p>The setup procedure depends on the developer platform.</p>"},{"location":"version-2.0/start-guide/installation/#ava-platform","title":"AVA Platform","text":"<ol> <li>Getting started with EWAOL</li> <li>Boot EWAOL</li> <li>Extend rootfs partition</li> </ol>"},{"location":"version-2.0/start-guide/installation/#pcu-platform","title":"PCU Platform","text":"<ol> <li>Getting started with PCU</li> </ol>"},{"location":"version-2.0/start-guide/installation/#xavier-platform","title":"Xavier Platform","text":"<ol> <li>Getting started with Xavier</li> </ol>"},{"location":"version-2.0/start-guide/installation/#2-set-up-the-in-vehicle-platform","title":"2. Set up the in-vehicle platform","text":"<p>If you do NOT need a vehicle-edge platform, please skip this step.</p> <p>TODO</p>"},{"location":"version-2.0/start-guide/installation/#3-install-autoware-container-images-on-the-developer-platform","title":"3. Install Autoware container images on the developer platform","text":""},{"location":"version-2.0/start-guide/installation/#ava-platform_1","title":"AVA Platform","text":"<ol> <li>System setup on AVA Platform</li> </ol>"},{"location":"version-2.0/start-guide/installation/#pcu-platform_1","title":"PCU Platform","text":"<ol> <li>System setup on PCU</li> </ol>"},{"location":"version-2.0/start-guide/installation/#xavier-platform_1","title":"Xavier Platform","text":"<ol> <li>System setup on Xavier Platform</li> </ol>"},{"location":"version-2.0/start-guide/installation/#4-install-autoware-container-images-on-the-in-vehicle-platform","title":"4. Install Autoware container images on the in-vehicle platform","text":"<p>If you do NOT need a vehicle-edge platform, please skip this step.</p> <p>TODO</p>"},{"location":"version-2.0/start-guide/installation/#5-set-up-software-tools","title":"5. Set up software tools","text":"<p>If you can use the cloud development platform, please skip this step.</p>"},{"location":"version-2.0/start-guide/installation/#ava-platform_2","title":"AVA Platform","text":"<ol> <li>System setup on your host</li> </ol>"},{"location":"version-2.0/start-guide/installation/#pcu-platform_2","title":"PCU Platform","text":"<ol> <li>System setup on your host</li> </ol>"},{"location":"version-2.0/start-guide/installation/#xavier-platform_2","title":"Xavier Platform","text":"<ol> <li>System setup on your host</li> </ol>"},{"location":"version-2.0/start-guide/installation/#6-run-autoware-on-the-development-platform","title":"6. Run Autoware on the development platform","text":"<p>Please refer to the How to run Autoware section.</p>"},{"location":"version-2.0/start-guide/installation/#7-advanced-setup","title":"7. Advanced setup","text":"<p>The instructions how to install advanced software such as desktop environment and NVIDIA driver.</p>"},{"location":"version-2.0/start-guide/installation/#ava-platform_3","title":"AVA Platform","text":"<ol> <li>Advanced setup for AVA Platform</li> </ol> <ol> <li> <p>This is unnecessary if you do NOT need a vehicle-edge platform.\u00a0\u21a9</p> </li> <li> <p>This is unnecessary if you can use the cloud development platform, Web.Auto.\u00a0\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"version-2.0/start-guide/installation/advanced-setup-setup-ava/","title":"Advanced setup for AVA Platform","text":""},{"location":"version-2.0/start-guide/installation/advanced-setup-setup-ava/#overview","title":"Overview","text":"<p>This instruction explains how to install advanced software for AVA platform.</p> <ol> <li>Desktop environment(XFCE)</li> <li>NVIDIA driver</li> <li>NVIDIA Container Toolkit</li> </ol>"},{"location":"version-2.0/start-guide/installation/advanced-setup-setup-ava/#checkout-the-repository-for-ava-platform","title":"Checkout the repository for AVA platform","text":"<ol> <li> <p>m5p3nc3r / meta-ewaol-machine</p> <pre><code>git clone git@github.com:m5p3nc3r/meta-ewaol-machine.git -b kirkstone-dev\n</code></pre> </li> <li> <p>Copy <code>meta-ewaol-ext</code> directory to the project root.</p> <pre><code>cp -rf meta-ewaol-machine/meta-ewaol-ext ~/meta-adlink-ampere\n</code></pre> </li> <li> <p>Download a missing patch in <code>meta-ewaol-ext</code> layer.</p> <pre><code>wget -P ~/meta-adlink-ampere/meta-ewaol-ext/recipes-ewaol/recipes-container/nvidia-container-toolkit/files https://raw.githubusercontent.com/autowarefoundation/open-ad-kit-docs/main/docs/version-2.0/start-guide/installation/patch/0002-TEMPORARY-force-aarch64-rpm.patch\n</code></pre> </li> <li> <p>Modify <code>ava.yml</code>.</p> <pre><code> header:\n version: 1\n includes:\n    - repo: meta-ewaol\n-     file: meta-ewaol-config/kas/baremetal.yml\n+     file: meta-ewaol-config/kas/baremetal-sdk.yml\n\nrepos:\n meta-ewaol:\n    path: meta-ewaol\n\n meta-adlink-ampere:\n\n+meta-openembedded:\n+   path: layers/meta-openembedded\n+   layers:\n+      meta-oe:\n+      meta-gnome:\n+      meta-multimedia:\n+      meta-xfce:\n+\n+meta-ewaol-ext:\n+   path: meta-ewaol-ext\n\n\nmachine: ava\n\n bblayers_conf_header:\n base: |\n    POKY_BBLAYERS_CONF_VERSION = \"2\"\n    BBPATH = \"${TOPDIR}\"\n    BBFILES ?= \"\"\n\n+local_conf_header:\n+meta-at: |\n+   XSERVER:append = \" xserver-xorg-extension-glx xserver-xorg-module-libwfb xserver-xorg-module-exa\"\n+   IMAGE_INSTALL:append = \" packagegroup-core-x11 packagegroup-xfce-extended acpid xf86-video-modesetting mesa-demos nvidia-container-toolkit\"\n+   DISTRO_FEATURES:append = \" opengl x11 glx\"\n+   PACKAGECONFIG:append:pn-xserver-xorg = \" xinerama\"\n+   IMAGE_FEATURES:append =\" x11 x11-base\"\n+   INSANE_SKIP:${PN}:append = \" already-stripped\"\n+   FILES:${PN}:append =\" /usr/share/containers/oci/hooks.d/oci-nvidia-hook.json\"\n\ntarget:\n-- ewaol-baremetal-image\n+- ewaol-baremetal-sdk-image\n</code></pre> </li> <li> <p>Build via kas.</p> <pre><code>kas build ava.yml\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/advanced-setup-setup-ava/#flash-yocto-image","title":"Flash yocto image","text":"<p>For example;</p> <pre><code>sudo bmaptool copy --bmap build/tmp_baremetal/deploy/images/ava/ewaol-baremetal-sdk-image-ava.wic.bmap build/tmp_baremetal/deploy/images/ava/ewaol-baremetal-sdk-image-ava.wic.gz /dev/sdb\n</code></pre>"},{"location":"version-2.0/start-guide/installation/advanced-setup-setup-ava/#extend-rootfs-partition","title":"Extend rootfs partition","text":"<p>Follow the instructions Extend rootfs partition.</p>"},{"location":"version-2.0/start-guide/installation/advanced-setup-setup-ava/#boot-your-machine","title":"Boot your machine","text":"<p>You can see XFCE desktop. </p>"},{"location":"version-2.0/start-guide/installation/advanced-setup-setup-ava/#nvidia-driver-installation","title":"NVIDIA driver installation","text":"<ol> <li> <p>Create the files required for compiling external modules.</p> <pre><code>cd /usr/src/kernel\nmake modules_prepare\n</code></pre> </li> <li> <p>Check NVIDIA graphics card.</p> <pre><code>lspci | grep -i nvidia\n</code></pre> <p> You can find a NVIDIA graphics card such as <code>GeForce RTX 3070 Ti</code>.</p> <pre><code>000d:01:00.0 VGA compatible controller: NVIDIA Corporation GA104 [GeForce RTX 3070 Ti] (rev a1)\n000d:01:00.1 Audio device: NVIDIA Corporation GA104 High Definition Audio Controller (rev a1)\n</code></pre> </li> <li> <p>Open the URL in browser.</p> <p>Official Drivers NVIDIA</p> </li> <li> <p>Select your graphics card, then click <code>SEARCH</code>.</p> <p></p> </li> <li> <p>Click <code>DOWNLOAD</code>.</p> <p></p> </li> <li> <p>Copy link to the file.</p> <p></p> </li> <li> <p>Download NVIDIA driver on AVA platform.</p> <p>For example;</p> <pre><code>wget https://jp.download.nvidia.com/XFree86/aarch64/515.65.01/NVIDIA-Linux-aarch64-515.65.01.run\nchmod +x NVIDIA-Linux-aarch64-515.65.01.run\n</code></pre> </li> <li> <p>Stop display manager to install NVIDIA driver.</p> <pre><code>systemctl stop xserver-nodm\n</code></pre> </li> <li> <p>Install NVIDIA driver.</p> <p>For example;</p> <pre><code>./NVIDIA-Linux-aarch64-515.65.01.run\n</code></pre> <p>Building kernel module starts.</p> <p></p> </li> <li> <p>Press  to select <code>Yes</code> and then press .</p> <p></p> </li> <li> <p>Press .</p> <p></p> </li> </ol>"},{"location":"version-2.0/start-guide/installation/advanced-setup-setup-ava/#change-display-output-from-motherboard-to-gpu","title":"Change display output from motherboard to GPU","text":"<p>You are using VGA, so switch to GPU.</p> <ol> <li> <p>Turn off AVA platform</p> </li> <li> <p>Connect HDMI or Display Port from your graphics card to your monitor.</p> </li> <li> <p>Change display mode to HDMI or Display Port on your monitor if needed.</p> </li> <li> <p>Turn on AVA platform, then the desktop window will be shown via GPU.</p> </li> </ol>"},{"location":"version-2.0/start-guide/installation/advanced-setup-setup-ava/#confirm-nvidia-docker-works-optional","title":"Confirm nvidia-docker works (Optional)","text":"<p>You can confirm nvidia-docker works by the following command.</p> <pre><code>docker run --gpus all --rm nvidia/cuda-arm64:11.4.0-base nvidia-smi\n</code></pre> <p>You can see the outputs like below.</p> <pre><code>root@ava:~# docker run --gpus all --rm nvidia/cuda-arm64:11.4.0-base nvidia-smi\nUnable to find image 'nvidia/cuda-arm64:11.4.0-base' locally\n11.4.0-base: Pulling from nvidia/cuda-arm64\n55c604a74c4b: Pull complete\n657fae4b9575: Pull complete\nb2cf3c1bfea9: Pull complete\n71492f856142: Pull complete\nc74b3fce51ac: Pull complete\nDigest: sha256:625c8265d0f88d4250d48958113f1184f96db794fbe5d6d5cdd782f9916ec718\nStatus: Downloaded newer image for nvidia/cuda-arm64:11.4.0-base\nThu Aug 25 23:17:40 2022\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 515.65.01    Driver Version: 515.65.01    CUDA Version: 11.7     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  NVIDIA GeForce ...  Off  | 0000000D:01:00.0  On |                  N/A |\n|  0%   35C    P8    18W / 290W |    234MiB /  8192MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n+-----------------------------------------------------------------------------+\n</code></pre>"},{"location":"version-2.0/start-guide/installation/boot-ewaol/","title":"Boot EWAOL","text":""},{"location":"version-2.0/start-guide/installation/boot-ewaol/#overview","title":"Overview","text":"<p>You need to use SSD enclosure case to flash yocto image to M.2 SSD directly.</p>"},{"location":"version-2.0/start-guide/installation/boot-ewaol/#flash-yocto-image","title":"Flash yocto image","text":"<p>Remove M.2 SSD from AVA platform and flash yocto image to it directly.</p> <ol> <li> <p>Remove M.2 SSD from AVA platform.</p> </li> <li> <p>Install M.2 SSD into a M.2 enclosure case.</p> </li> <li> <p>Plug it into your host machine.</p> </li> <li> <p>Then, show available block devices.</p> <pre><code>lsblk -p\nNAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT\n...\n/dev/sdb       8:0   0 119.2G  0 disk\n\u251c\u2500sdb1         8:1   0   512M  0 part\n\u251c\u2500sdb2         8:2   0     1G  0 part /media/foo/7d00c690-db24-462d-8c8d-dce7bdf151d8\n\u2514\u2500sdb3         8:3   0 117.8G  0 part\n</code></pre> </li> <li> <p>Flush yocto image to M.2 SSD.</p> <p> For example</p> <pre><code>sudo bmaptool copy --bmap build/tmp_baremetal/deploy/images/ava/ewaol-baremetal-image-ava.wic.bmap build/tmp_baremetal/deploy/images/ava/ewaol-baremetal-image-ava.wic.gz  /dev/sdb\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/boot-ewaol/#extend-rootfs-partition","title":"Extend rootfs partition","text":"<p>You have to extend rootfs partition. Follow the instructions Extend rootfs partition</p>"},{"location":"version-2.0/start-guide/installation/boot-ewaol/#reinstall-ssd","title":"Reinstall SSD","text":"<ol> <li> <p>Remove M.2 SSD from enclosure case and install it into AVA platform, then turn it on.</p> </li> <li> <p>The following screen comes up, then login as <code>root</code> without password.</p> <pre><code>EWAOL (Edge Workload Abstraction and Orchestration Layer) v1.0 ava -\nava login:\n</code></pre> <p> You are able to access via SSH.</p> </li> </ol>"},{"location":"version-2.0/start-guide/installation/extend-rootfs/","title":"Extend rootfs partition","text":""},{"location":"version-2.0/start-guide/installation/extend-rootfs/#overview","title":"Overview","text":"<p>The rootfs partition is not fully occupied on M.2 SSD, and the size is too short to run k3s clusters. So we have to extend rootfs partition.</p> <p>Here is the instruction how to extend rootfs partition</p>"},{"location":"version-2.0/start-guide/installation/extend-rootfs/#extend-rootfs","title":"Extend rootfs","text":"<ol> <li> <p>Run <code>gparted</code>.</p> <p>You may get the following warning when you run <code>gparted</code>.</p> <p>Press <code>Fix</code>.</p> <p></p> <p>Contents of storage after we flashed yocto image to M.2 SSD.  </p> </li> <li> <p>Extend rootfs partition to the end of disk.</p> <p>Right click <code>root</code> partition, then click <code>Resize/Move</code>.  </p> <p>Extend the square to the right end.</p> <p> </p> <p>Then, click <code>Resize/Move</code>.</p> <p></p> </li> <li> <p>Apply changes.</p> <p>Click check mark icon.</p> <p></p> <p>Click <code>Apply</code>.</p> <p></p> <p>Click <code>Close</code>.</p> <p></p> <p>You can get rootfs as follows.</p> <p></p> </li> </ol>"},{"location":"version-2.0/start-guide/installation/getting-started-pcu/","title":"Getting started with PCU","text":""},{"location":"version-2.0/start-guide/installation/getting-started-pcu/#overview","title":"Overview","text":"<p>Reference: PCU Setup Guide</p> <p>This instruction explains how to boot up Ubuntu on PCU and access it from host PC.</p> <ul> <li>If you are using onboard 64G EMMC as boot device, it's already been pre-installed with Ubuntu 20.04, and you can skip this step;</li> </ul> <ul> <li>If you would like to boot from SD card, you could either request a Micro SD card with pre-installed system or flash by yourself under instructions in below section. <code>Ubuntu 20.04</code> is preferred.</li> </ul>"},{"location":"version-2.0/start-guide/installation/getting-started-pcu/#hardware-setup","title":"Hardware Setup","text":"<p>The minimum recommended External Micro SD card size is 64GB, and the speed should be at least class 10 A1, it is strongly recommended to use high speed SD card, e.g. class U3, A2.</p> <p>To boot from SD card, \"SW1\" should be set as: <code>ON</code>, and SD card should be plugged in. </p> <p>For blank SD card, the system image need to be flashed first using another PC.</p>"},{"location":"version-2.0/start-guide/installation/getting-started-pcu/#get-mpu-image","title":"Get MPU image","text":"<p>Official images with recommended OS are available on PCU Resource Download page.</p> <p>Resource Download Page</p> <p>For PCU 2.0 hardware, please download the MPU image file for SD card as marked red to your local storage.</p> <p></p>"},{"location":"version-2.0/start-guide/installation/getting-started-pcu/#flash-mpu-image","title":"Flash MPU image","text":"<p>To flash MPU image on SD card, you will need a PC with a micro SD card reader.</p> <p>This step could be done on either Windows or Linux PC with different flash tools.</p> <p>Linux will be used in this instruction as example:</p> <ol> <li> <p>Insert card reader with target micro SD card to host PC.</p> </li> <li> <p>Find out device name for the SD card.</p> <pre><code>sudo lsblk\nNAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT\n...\nsda      8:0    0 238.5G  0 disk\n\u251c\u2500sda1   8:1    0   512M  0 part /boot/efi\n\u2514\u2500sda2   8:2    0   238G  0 part /\nsdb      8:16   0 447.1G  0 disk\n\u251c\u2500sdb1   8:17   0 428.4G  0 part\n\u251c\u2500sdb2   8:18   0   513M  0 part\n\u2514\u2500sdb3   8:19   0  18.2G  0 part\nsdc      8:32   1  14.9G  0 disk\n\u2514\u2500sdc1   8:33   1  14.9G  0 part /media/adlink/B4A1-62CD\n</code></pre> <p> In this case, <code>sdc</code> is the device name</p> </li> <li> <p>Flash image to SD card.</p> <pre><code>sudo gzip -dc YOUR-DOWNLOAD-PATH/xxx.gz |sudo dd of=/dev/YOUR-DEVICE\n</code></pre> <p>For example;</p> <pre><code>sudo gzip -dc ~/Downloads/autocore-1046-ubuntu20.04-sd-pcu2.0-sw0.5.0-20201210.gz |sudo dd of=/dev/sdc\n</code></pre> <p>Wait patiently until the flash process finishes, this may take up to half hour.</p> </li> <li> <p>Boot up.</p> <p>Now you can plug in the SD card to PCU and power up. The system should be ready to work.</p> </li> </ol>"},{"location":"version-2.0/start-guide/installation/getting-started-pcu/#connect-to-pcu-via-ssh","title":"Connect To PCU via SSH","text":"<p>You could connect to PCU via SSh either by ethernet or serial port.</p> <p>The default username, password and IP address of PCU is as below: </p>"},{"location":"version-2.0/start-guide/installation/getting-started-pcu/#ssh-through-ethernet","title":"SSH through ethernet","text":"<ol> <li> <p>Cable connection</p> <p>Connect host PC to RJ45 2 / RJ45 3 / RJ45 4 Eth port (Blue) on PCU board with Ethernet cable (GbE, need Cat.5e or above).</p> <p></p> </li> <li> <p>Configure static IP for host PC    You need to manually configure static IP for PC in order to connect with PCU, as there is no DHCP server running on PCU. The static IP should be different with PCU and within the same network segment. (e.g. 192.168.1.200)</p> <p></p> </li> <li> <p>SSH login</p> <pre><code>ssh user@192.168.1.239\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/getting-started-pcu/#ssh-through-serial-port","title":"SSH through Serial Port","text":"<ol> <li> <p>Cable connection</p> <p>As an alternative, you could also choose to connect to PCU by micro USB (ttyUSB port in figure blow).</p> <p></p> </li> <li> <p>ttyUSB Settings</p> <p>For Linux users, you could use \"cutecom\" to connect to PCU.</p> <pre><code>sudo apt install cutecom\ncutecom\n</code></pre> <p>Please set parameters as follows, <code>Device</code> shall be chosen based on your host PC.</p> <p></p> <p>For other system users, the parameters are:</p> Parameter Value Baudrate 115200 Data 8 Stop bit 1 Parity None Hardware flow control no Software flow control no </li> <li> <p>Reset PCU and Login</p> <p>Press reset button and wait until login.</p> <pre><code>ssh user@192.168.1.239\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/getting-started-pcu/#check-pcu-public-ip-address","title":"Check PCU public IP Address","text":"<p>Connect PCU to internet via RJ45 1 Eth port (Red), this Eth port is configured to obtain IP address automatically from DHCP by default.</p> <p>From section above, you can SSH connect to PCU, and you can look for IP address of the public ethernet port(fm1-mac5).</p> <pre><code>ifconfig fm1-mac5\nfm1-mac5: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n  inet 192.168.10.221  netmask 255.255.255.0  broadcast 192.168.10.255\n  inet6 fe80::204:7cff:fe2e:191  prefixlen 64  scopeid 0x20&lt;link&gt;\n  ether 00:04:7c:2e:01:91  txqueuelen 1000  (Ethernet)\n  RX packets 2806  bytes 3665212 (3.6 MB)\n  RX errors 0  dropped 0  overruns 0  frame 0\n  TX packets 2238  bytes 175964 (175.9 KB)\n  TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n  device memory 0x1ae8000-1ae8fff\n</code></pre> <p> You can find IP address of PCU such as <code>192.168.10.221</code>.</p>"},{"location":"version-2.0/start-guide/installation/getting-started-xavier/","title":"Getting started with Xavier","text":""},{"location":"version-2.0/start-guide/installation/getting-started-xavier/#overview","title":"Overview","text":"<p>Reference: Jetson AGX Xavier Developer Kit User Guide</p> <p>This instruction explains how to boot up Ubuntu on Xavier and access it from host PC.</p>"},{"location":"version-2.0/start-guide/installation/getting-started-xavier/#connect-to-xavier-via-ssh","title":"Connect To Xavier via SSH","text":"<p>Connect Xavier to internet, this network port is configured to obtain IP address automatically from DHCP by default.</p> <p>You can look for IP address of the public ethernet and connect to Xavier via SSH.</p> <pre><code>ifconfig\ndocker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500\n        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255\n        ether 02:42:1c:6c:b1:ec  txqueuelen 0  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\neth0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500\n        ether 48:b0:2d:2b:7a:a8  txqueuelen 1000  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\neth1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n        inet 192.168.10.46  netmask 255.255.252.0  broadcast 192.168.11.255\n        inet6 fe80::9fcb:8fc6:a1a4:c6d2  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether 2c:16:db:a3:03:10  txqueuelen 1000  (Ethernet)\n        RX packets 4946  bytes 6212659 (6.2 MB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 723  bytes 72036 (72.0 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;\n        loop  txqueuelen 1000  (Local Loopback)\n        RX packets 218  bytes 20064 (20.0 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 218  bytes 20064 (20.0 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nrndis0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500\n        ether 82:24:ce:68:6a:bd  txqueuelen 1000  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nusb0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500\n        ether 82:24:ce:68:6a:bf  txqueuelen 1000  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre> <p> You can find IP address of Xavier such as <code>192.168.10.46</code>.</p>"},{"location":"version-2.0/start-guide/installation/getting-started/","title":"Getting started with EWAOL","text":""},{"location":"version-2.0/start-guide/installation/getting-started/#overview","title":"Overview","text":"<p>Reference: Project Quickstart \u2014 EWAOL documentation</p> <p>This instruction explains how to build yocto image with EWAOL on your host machine.</p>"},{"location":"version-2.0/start-guide/installation/getting-started/#build-host-setup","title":"Build Host Setup","text":"<ol> <li> <p>Install required packages for the build host by following The Yocto Project \u00ae 3.3.1 documentation.</p> <pre><code>sudo apt-get install gawk wget git diffstat unzip texinfo gcc build-essential chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev pylint3 xterm python3-subunit mesa-common-dev\n</code></pre> </li> <li> <p>Install the kas setup tool.</p> <pre><code>sudo -H pip3 install kas\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/getting-started/#checkout-the-repository-for-ava-platform","title":"Checkout the repository for AVA platform","text":"<ol> <li> <p>ADLINK / meta-adlink-ampere</p> <pre><code>git clone https://github.com/ADLINK/meta-adlink-ampere.git -b kirkstone\n</code></pre> </li> <li> <p>EWAOL / meta-ewaol</p> <pre><code>cd meta-adlink-ampere\ngit clone https://git.gitlab.arm.com/ewaol/meta-ewaol.git -b v1.0\n</code></pre> </li> <li> <p>Replace <code>virtualization</code> with <code>baremetal</code> in <code>ava.yml</code>.</p> <pre><code> header:\n version: 1\n includes:\n    - repo: meta-ewaol\n-     file: meta-ewaol-config/kas/virtualization.yml\n+     file: meta-ewaol-config/kas/baremetal.yml\n\nrepos:\n meta-ewaol:\n    path: meta-ewaol\n\n meta-adlink-ampere:\n\n\n\n machine: ava\n\n bblayers_conf_header:\n base: |\n    POKY_BBLAYERS_CONF_VERSION = \"2\"\n    BBPATH = \"${TOPDIR}\"\n    BBFILES ?= \"\"\n\n target:\n-  - ewaol-virtualization-image\n+  - ewaol-baremetal-image\n</code></pre> </li> <li> <p>Build via kas</p> <pre><code>kas build ava.yml\n</code></pre> </li> </ol> <p> You should be careful of utilizing full CPU power during build. </p>"},{"location":"version-2.0/start-guide/installation/system-setup-ava/","title":"System Setup on AVA platform","text":""},{"location":"version-2.0/start-guide/installation/system-setup-ava/#overview","title":"Overview","text":"<p>This instruction explains how to perform system setup for test execution on AVA platform.</p>"},{"location":"version-2.0/start-guide/installation/system-setup-ava/#access-to-ava-platform-via-ssh","title":"Access to AVA platform via SSH","text":"<pre><code>ssh root@IP-ADDRESS\n</code></pre> <p> For example;</p> <pre><code>ssh root@192.168.0.62\n</code></pre>"},{"location":"version-2.0/start-guide/installation/system-setup-ava/#download-kubernetes-yaml-files","title":"Download kubernetes yaml files","text":"<p>Autoware.Universe runs as k3s clusters in Open AD Kit, so please download kubernetes yaml files to deploy Autoware to AVA platform.</p> <ol> <li> <p>Download.</p> <pre><code>wget https://raw.githubusercontent.com/autowarefoundation/open-ad-kit-docs/main/docs/version-2.0/start-guide/installation/deployments/comhpc-deployments.zip\n</code></pre> </li> <li> <p>Unzip it.</p> <pre><code>unzip comhpc-deployments.zip -d comhpc-deployments\n</code></pre> <p> You will see the following files are unzipped.</p> <pre><code>Archive:  comhpc-deployments.zip\n  inflating: comhpc-api-deployment.yaml\n  inflating: comhpc-control-deployment.yaml\n  inflating: comhpc-map-deployment.yaml\n  inflating: comhpc-persistent-volume.yaml\n  inflating: comhpc-persistent-volume-claim.yaml\n  inflating: comhpc-planning-deployment.yaml\n  inflating: comhpc-simulator-deployment.yaml\n  inflating: comhpc-system-deployment.yaml\n  inflating: comhpc-vehicle-deployment.yaml\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-ava/#download-map-files","title":"Download map files","text":"<ol> <li> <p>Download from Google Drive.</p> <pre><code>wget \"https://drive.google.com/uc?export=download&amp;id=1vWMLbmwJJE5tYO40ypCMxqtmgQPQxhiw&amp;confirm=t&amp;uuid=3d84d854-3dd2-4950-8cc8-248feeab547d\" -O sample_data.zip\n</code></pre> </li> <li> <p>Unzip it.</p> <pre><code>unzip sample_data.zip\n</code></pre> </li> <li> <p>Move <code>map</code> directory from <code>sample_data</code>.</p> <pre><code>mv sample_data/map/ ~/\n</code></pre> <p> You will see the following files are located.</p> <pre><code>root@ava:~# ls -la ~/map\ntotal 61288\ndrwxrwxr-x 2 root root     4096 Aug 18 06:23 .\ndrwx------ 6 root root     4096 Aug 18 06:23 ..\n-rw-r--r-- 1 root root  1841436 Aug 18 06:23 lanelet2_map.osm\n-rw-r--r-- 1 root root 60904720 Aug 18 06:23 pointcloud_map.pcd\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-ava/#download-kernel-configuration-file-for-tuning-kernel-parameters","title":"Download kernel configuration file for tuning kernel parameters","text":"<p>We have to reconfigure kernel parameters by using <code>sysctl</code> for system stability.</p> <ol> <li> <p>Download.</p> <pre><code>wget -P /etc/sysctl.d https://raw.githubusercontent.com/autowarefoundation/open-ad-kit-docs/main/docs/version-2.0/start-guide/installation/sysctl.d/60_cyclonedds.conf\n</code></pre> </li> <li> <p>Update kernel parameters.</p> <pre><code>sysctl -p /etc/sysctl.d/60_cyclonedds.conf\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-ava/#download-configuration-file-of-cyclone-dds","title":"Download configuration file of Cyclone DDS","text":"<p>In this test, we are using Cyclone DDS, so you also need to download configuration file of Cyclone DDS.</p> <ol> <li> <p>Download <code>cyclonedds.xml</code>.</p> <pre><code>wget -P ~/cyclonedds https://raw.githubusercontent.com/autowarefoundation/open-ad-kit-docs/main/docs/version-2.0/start-guide/installation/cyclonedds/cyclonedds.xml\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-ava/#modify-cycloneddsxml","title":"Modify <code>cyclonedds.xml</code>","text":"<p>You need to change the element <code>NetworkInterfaceAddress</code> to the network interface currently in use.</p> <ol> <li> <p>Find network interface.</p> <p> You can find a network interface such as <code>enP4p4s0</code>.</p> <pre><code>root@comhpc:~# ip a\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n   link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n   inet 127.0.0.1/8 scope host lo\n      valid_lft forever preferred_lft forever\n   inet6 ::1/128 scope host\n      valid_lft forever preferred_lft forever\n2: enP4p4s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000\n   link/ether 00:30:64:1a:0a:65 brd ff:ff:ff:ff:ff:ff\n   inet 192.168.0.62/24 brd 192.168.0.255 scope global dynamic enP4p4s0\n      valid_lft 3383sec preferred_lft 2933sec\n   inet6 fe80::1ab4:7a14:28e:4e61/64 scope link\n      valid_lft forever preferred_lft forever\n   inet6 fe80::230:64ff:fe1a:a65/64 scope link\n      valid_lft forever preferred_lft forever\n3: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n   link/sit 0.0.0.0 brd 0.0.0.0\n4: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default\n   link/ether 02:42:4b:b2:ee:68 brd ff:ff:ff:ff:ff:ff\n   inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n      valid_lft forever preferred_lft forever\n...\n</code></pre> </li> <li> <p>Change the <code>NetworkInterfaceAddress</code>.</p> <pre><code>vi ~/cyclonedds/cyclonedds.xml\n</code></pre> <p>For example;  cyclonedds.xml</p> <pre><code> &lt;General&gt;\n-  &lt;NetworkInterfaceAddress&gt;lo&lt;/NetworkInterfaceAddress&gt;\n+  &lt;NetworkInterfaceAddress&gt;enP4p4s0&lt;/NetworkInterfaceAddress&gt;\n&lt;/General&gt;\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-host/","title":"System Setup on your host","text":""},{"location":"version-2.0/start-guide/installation/system-setup-host/#overview","title":"Overview","text":"<p>This instruction explains how to perform system setup for test execution on your host.</p> <p>You need to copy docker images and necessary files.</p>"},{"location":"version-2.0/start-guide/installation/system-setup-host/#download-scenario-simulator-image-to-your-host-machine","title":"Download scenario simulator image to your host machine","text":"<p>The docker image of scenario simulator is registered in GitHub Container Registry</p> <ol> <li> <p>Copy docker image to your host machine.</p> <pre><code>docker pull ghcr.io/tier4/scenario_simulator_v2:galactic\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-host/#install-nvidia-docker2-rocker","title":"Install nvidia-docker2 &amp; Rocker","text":"<p>In this test, we try to run rviz inside docker, so please install nvidia-docker2 &amp; Rocker.</p> <p> This is quoted from Scenario testing framework for Autoware: Run on Docker</p> <ol> <li> <p>If you have NVIDIA GPU(s) in your machine, you have to install nvidia-driver and nvidia-docker2.</p> <pre><code>curl -s -L https://nvidia.github.io/nvidia-container-runtime/gpgkey | sudo apt-key add -\ncurl -s -L https://nvidia.github.io/nvidia-container-runtime/ubuntu20.04/nvidia-container-runtime.list | \\\n  sudo tee /etc/apt/sources.list.d/nvidia-container-runtime.list\nsudo apt-get update\nsudo apt install -y nvidia-docker2\nsudo systemctl restart docker.service\n</code></pre> </li> <li> <p>Install Rocker</p> <pre><code>sudo pip3 install git+https://github.com/osrf/rocker.git\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-host/#download-map-and-scenario-files","title":"Download map and scenario files","text":"<ol> <li> <p>Download from Google Drive.</p> <pre><code>wget \"https://drive.google.com/uc?export=download&amp;id=1vWMLbmwJJE5tYO40ypCMxqtmgQPQxhiw&amp;confirm=t&amp;uuid=3d84d854-3dd2-4950-8cc8-248feeab547d\" -O sample_data.zip\n</code></pre> </li> <li> <p>Unzip it.</p> <pre><code>unzip sample_data.zip\n</code></pre> </li> <li> <p>Open the scenario file named <code>t4v2.yaml</code> in <code>sample_data</code>.</p> <p></p> </li> <li> <p>Change the <code>filepath</code> of <code>lanelet2_map.osm</code> and <code>pointcloud_map.pcd</code> to your own directory.</p> <p></p> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-host/#download-kernel-configuration-file-for-tuning-kernel-parameters","title":"Download kernel configuration file for tuning kernel parameters","text":"<p>We have to reconfigure kernel parameters by using <code>sysctl</code> for system stability.</p> <ol> <li> <p>Download.</p> <pre><code>wget -P /etc/sysctl.d https://raw.githubusercontent.com/autowarefoundation/open-ad-kit-docs/main/docs/version-2.0/start-guide/installation/sysctl.d/60_cyclonedds.conf\n</code></pre> </li> <li> <p>Update kernel parameters.</p> <pre><code>sysctl -p /etc/sysctl.d/60_cyclonedds.conf\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-host/#download-configuration-file-of-cyclone-dds","title":"Download configuration file of Cyclone DDS","text":"<p>In this test, we are using Cyclone DDS, so you also need to download configuration file of Cyclone DDS.</p> <ol> <li> <p>Download <code>cyclonedds.xml</code>.</p> <pre><code>wget -P ~/cyclonedds https://raw.githubusercontent.com/autowarefoundation/open-ad-kit-docs/main/docs/version-2.0/start-guide/installation/cyclonedds/cyclonedds.xml\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-host/#modify-cycloneddsxml","title":"Modify <code>cyclonedds.xml</code>","text":"<p>You need to change the element <code>NetworkInterfaceAddress</code> to the network interface currently in use.</p> <ol> <li> <p>Find network interface.</p> <pre><code>ip addr\n1: lo: &lt;LOOPBACK,MULTICAST,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n 2: enp0s31f6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000\n    link/ether 66:77:88:99:aa:bb brd ff:ff:ff:ff:ff:ff\n    inet 192.168.10.1/24 brd 192.168.10.255 scope global noprefixroute enp0s31f6\n       valid_lft forever preferred_lft forever\n    inet6 fe80::f15d:4196:b777:6875/64 scope link noprefixroute\n       valid_lft forever preferred_lft forever\n 3: wlp82s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000\n    link/ether cc:dd:ee:ff:00:01 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.0.28/24 brd 192.168.0.255 scope global dynamic noprefixroute wlp82s0\n       valid_lft 3137sec preferred_lft 3137sec\n    inet6 fe80::f493:f223:dfcc:bd1b/64 scope link noprefixroute\n       valid_lft forever preferred_lft forever\n 4: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default\n    link/ether 23:45:67:89:ab:cd brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n</code></pre> <p> You can find a network interface such as <code>enp0s31f6</code>.</p> </li> <li> <p>Change the <code>NetworkInterfaceAddress</code>.</p> <pre><code>vi ~/cyclonedds/cyclonedds.xml\n</code></pre> <p>For example;  cyclonedds.xml</p> <pre><code> &lt;General&gt;\n-  &lt;NetworkInterfaceAddress&gt;lo&lt;/NetworkInterfaceAddress&gt;\n+  &lt;NetworkInterfaceAddress&gt;enp0s31f6&lt;/NetworkInterfaceAddress&gt;\n&lt;/General&gt;\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-pcu/","title":"System Setup on PCU","text":""},{"location":"version-2.0/start-guide/installation/system-setup-pcu/#overview","title":"Overview","text":"<p>This instruction explains how to perform system setup for test execution on PCU.</p> <p>You need to install Docker Engine, copy docker images and necessary files.</p>"},{"location":"version-2.0/start-guide/installation/system-setup-pcu/#access-to-pcu-via-ssh","title":"Access to PCU via SSH","text":"<pre><code>ssh user@IP-ADDRESS\n</code></pre> <p>For example;</p> <pre><code>ssh user@192.168.10.221\n</code></pre>"},{"location":"version-2.0/start-guide/installation/system-setup-pcu/#copy-autowareauto-image-to-pcu","title":"Copy Autoware.Auto image to PCU","text":"<p>NOTE: docker should be installed with post-installation steps. For instructions please refer to:</p> <ul> <li>Install Docker Engine on Ubuntu.</li> <li>Post-installation steps for Linux.</li> </ul> <p>The docker image of Autoware.Auto is registered in GitLab Container Registry. </p> <ol> <li> <p>Copy docker image to PCU.</p> <pre><code>docker pull registry.gitlab.com/autowarefoundation/autoware.auto/autowareauto/arm64/openadkit-foxy:latest\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-pcu/#copy-necessary-files-to-local-downloads-folder","title":"Copy necessary files to local Downloads folder","text":"<ol> <li> <p>Copy files related to map contents.</p> <p>Files are placed in the directory docs/Appendix/Open-AD-Kit-Start-Guide/map</p> <ul> <li>lanelet2_map.osm</li> <li>pointcloud_map.pcd</li> <li>global_map_center.pcd.yaml</li> <li>lanelet2_map_provider.osm.yaml</li> <li>map_publisher.param.yaml</li> </ul> <p>Copy files to your local folder (Downloads folder as example) as the following directory structure.</p> <p></p> </li> <li> <p>Copy configuration file of Cyclone DDS.</p> <p>In this test, we are using Cyclone DDS, so you also need to copy configuration file of Cyclone DDS.</p> <p>File is placed in the directory docs/Appendix/Open-AD-Kit-Start-Guide/cyclonedds</p> <ul> <li>cyclonedds.xml</li> </ul> <p>Copy the file to your local folder as the following directory structure.</p> <p></p> </li> <li> <p>Copy kernel configuration file for tuning kernel parameters.</p> <p>We have to reconfigure kernel parameters by using <code>sysctl</code> for system stability.</p> <p>File is placed in the directory docs/Appendix/Open-AD-Kit-Start-Guide/sysctl.d</p> <ul> <li>60_cyclonedds.conf</li> </ul> <p>Copy the file to your local folder.</p> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-pcu/#copy-files-from-local-folder-to-pcu","title":"Copy files from local folder to PCU","text":"<ol> <li> <p>Connect your host PC with PCU through internet and copy files with SCP.</p> <ol> <li> <p>Access to PCU via SSH</p> <p>For example;</p> <pre><code>ssh user@192.168.10.221\n</code></pre> </li> <li> <p>Copy kernel configuration file to <code>/etc/sysctl.d/</code></p> <pre><code>sudo scp USER-NAME@IP-ADDRESS:/home/USER-NAME/Downloads/60_cyclonedds.conf /etc/sysctl.d/\n</code></pre> <p>For example;</p> <pre><code>sudo scp adlink@192.168.10.237:/home/adlink/Downloads/60_cyclonedds.conf /etc/sysctl.d/\n</code></pre> <p>Then type in the password of PCU (default password: user) and host PC as request.</p> </li> <li> <p>Update kernel parameters.</p> <pre><code>sudo sysctl -p /etc/sysctl.d/60_cyclonedds.conf\n</code></pre> </li> <li> <p>Copy map contents files and Cyclone DDS configuration file.</p> <pre><code>sudo scp -r USER-NAME@IP-ADDRESS:/home/adlink/Downloads/map ~/\n</code></pre> <pre><code>sudo scp -r USER-NAME@IP-ADDRESS:/home/adlink/Downloads/cyclonedds ~/\n</code></pre> </li> </ol> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-pcu/#modify-cycloneddsxml","title":"Modify <code>cyclonedds.xml</code>","text":"<p>You need to change the element <code>NetworkInterfaceAddress</code> to the network interface currently in use.</p> <ol> <li> <p>Find network interface.</p> <pre><code>ip addr\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n   link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n   inet 127.0.0.1/8 scope host lo\n     valid_lft forever preferred_lft forever\n   inet6 ::1/128 scope host\n     valid_lft forever preferred_lft forever\n2: fm1-mac1: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq master br0 state DOWN group default qlen 1000\n   link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff\n   inet6 fe80::204:7cff:fe2e:190/64 scope link\n     valid_lft forever preferred_lft forever\n3: fm1-mac5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000\n   link/ether 00:04:7c:2e:01:91 brd ff:ff:ff:ff:ff:ff\n   inet 192.168.10.221/24 brd 192.168.10.255 scope global dynamic fm1-mac5\n     valid_lft 254392sec preferred_lft 254392sec\n   inet6 fe80::204:7cff:fe2e:191/64 scope link\n     valid_lft forever preferred_lft forever\n4: fm1-mac6: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq master br0 state DOWN group default qlen 1000\n   link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff\n5: fm1-sw: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq master br0 state UP group default qlen 1000\n   link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff\n   inet6 fe80::204:7cff:fe2e:190/64 scope link\n      valid_lft forever preferred_lft forever\n6: fm1-mac10: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq master br0 state DOWN group default qlen 1000\n   link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff\n7: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n   link/sit 0.0.0.0 brd 0.0.0.0\n8: br0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000\n   link/ether 00:04:7c:2e:01:90 brd ff:ff:ff:ff:ff:ff\n   inet 192.168.1.239/24 brd 192.168.1.255 scope global br0\n     valid_lft forever preferred_lft forever\n   inet6 fe80::204:7cff:fe2e:190/64 scope link\n     valid_lft forever preferred_lft forever\n9: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default\n   link/ether 02:42:cb:aa:a6:9d brd ff:ff:ff:ff:ff:ff\n   inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n     valid_lft forever preferred_lft forever\n</code></pre> <p> You can find a network interface such as <code>fm1-mac5</code>.</p> </li> <li> <p>Change the <code>NetworkInterfaceAddress</code>.</p> <pre><code>sudo vi ~/cyclonedds/cyclonedds.xml\n</code></pre> <p>For example;  cyclonedds.xml</p> <pre><code> &lt;General&gt;\n-  &lt;NetworkInterfaceAddress&gt;lo&lt;/NetworkInterfaceAddress&gt;\n+  &lt;NetworkInterfaceAddress&gt;fm1-mac5&lt;/NetworkInterfaceAddress&gt;\n&lt;/General&gt;\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-xavier/","title":"System Setup on Xavier platform","text":""},{"location":"version-2.0/start-guide/installation/system-setup-xavier/#overview","title":"Overview","text":"<p>This instruction explains how to perform system setup for test execution on Xavier platform.</p>"},{"location":"version-2.0/start-guide/installation/system-setup-xavier/#access-to-xavier-platform-via-ssh","title":"Access to Xavier platform via SSH","text":"<pre><code>ssh root@IP-ADDRESS\n</code></pre> <p> For example;</p> <pre><code>ssh nv@192.168.10.46\n</code></pre>"},{"location":"version-2.0/start-guide/installation/system-setup-xavier/#copy-autoware-universe-image-to-xavier","title":"Copy Autoware Universe image to Xavier","text":"<p>NOTE: docker should be installed with post-installation steps. For instructions please refer to:</p> <ul> <li>Install Docker Engine on Ubuntu.</li> <li>Post-installation steps for Linux.</li> </ul> <p>The docker image of Autoware Universe for arm64 is registered in Autoware Foundation Container Registry.</p> <ol> <li> <p>Copy docker image to Xavier.</p> <pre><code>docker pull ghcr.io/autowarefoundation/autoware-universe:galactic-20220728-prebuilt-cuda\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-xavier/#k3s-installation","title":"K3s Installation","text":"<p>NOTE: K3s should be installed with following steps. For official instructions please refer to: Install K3s on Ubuntu.</p> <ol> <li> <p>Install K3s.</p> <pre><code>curl -sfL https://get.k3s.io | sh -\n</code></pre> </li> <li> <p>Create directory.</p> <pre><code>mkdir ~/.kube/\n</code></pre> </li> <li> <p>Copy config file</p> <pre><code>sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config\n</code></pre> </li> <li> <p>Setting environment</p> <pre><code>export KUBECONFIG=~/.kube/config\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-xavier/#download-kubernetes-yaml-files","title":"Download kubernetes yaml files","text":"<p>Autoware.Universe runs as k3s clusters in Open AD Kit, so please download kubernetes yaml files to deploy Autoware to Xavier platform.</p> <ol> <li> <p>Download.</p> <pre><code>wget https://raw.githubusercontent.com/autowarefoundation/open-ad-kit-docs/main/docs/version-2.0/start-guide/installation/deployments/comhpc-deployments.zip\n</code></pre> </li> <li> <p>Unzip it.</p> <pre><code>unzip comhpc-deployments.zip -d comhpc-deployments\n</code></pre> <p> You will see the following files are unzipped.</p> <pre><code>Archive:  comhpc-deployments.zip\n  inflating: comhpc-api-deployment.yaml\n  inflating: comhpc-control-deployment.yaml\n  inflating: comhpc-map-deployment.yaml\n  inflating: comhpc-persistent-volume.yaml\n  inflating: comhpc-persistent-volume-claim.yaml\n  inflating: comhpc-planning-deployment.yaml\n  inflating: comhpc-simulator-deployment.yaml\n  inflating: comhpc-system-deployment.yaml\n  inflating: comhpc-vehicle-deployment.yaml\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-xavier/#download-map-files","title":"Download map files","text":"<ol> <li> <p>Download from Google Drive.</p> <pre><code>wget \"https://drive.google.com/uc?export=download&amp;id=1vWMLbmwJJE5tYO40ypCMxqtmgQPQxhiw&amp;confirm=t&amp;uuid=3d84d854-3dd2-4950-8cc8-248feeab547d\" -O sample_data.zip\n</code></pre> </li> <li> <p>Unzip it.</p> <pre><code>unzip sample_data.zip\n</code></pre> </li> <li> <p>Move <code>map</code> directory from <code>sample_data</code>.</p> <pre><code>mv sample_data/map/ ~/\n</code></pre> <p> You will see the following files are located.</p> <pre><code>ls -la ~/map\ntotal 61288\ndrwxrwxr-x 2 root root     4096 Aug 18 06:23 .\ndrwx------ 6 root root     4096 Aug 18 06:23 ..\n-rw-r--r-- 1 root root  1841436 Aug 18 06:23 lanelet2_map.osm\n-rw-r--r-- 1 root root 60904720 Aug 18 06:23 pointcloud_map.pcd\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-xavier/#download-kernel-configuration-file-for-tuning-kernel-parameters","title":"Download kernel configuration file for tuning kernel parameters","text":"<p>We have to reconfigure kernel parameters by using <code>sysctl</code> for system stability.</p> <ol> <li> <p>Download.</p> <pre><code>wget -P /etc/sysctl.d https://raw.githubusercontent.com/autowarefoundation/open-ad-kit-docs/main/docs/version-2.0/start-guide/installation/sysctl.d/60_cyclonedds.conf\n</code></pre> </li> <li> <p>Update kernel parameters.</p> <pre><code>sysctl -p /etc/sysctl.d/60_cyclonedds.conf\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-xavier/#download-configuration-file-of-cyclone-dds","title":"Download configuration file of Cyclone DDS","text":"<p>In this test, we are using Cyclone DDS, so you also need to download configuration file of Cyclone DDS.</p> <ol> <li> <p>Download <code>cyclonedds.xml</code>.</p> <pre><code>wget -P ~/cyclonedds https://raw.githubusercontent.com/autowarefoundation/open-ad-kit-docs/main/docs/version-2.0/start-guide/installation/cyclonedds/cyclonedds.xml\n</code></pre> </li> </ol>"},{"location":"version-2.0/start-guide/installation/system-setup-xavier/#modify-cycloneddsxml","title":"Modify <code>cyclonedds.xml</code>","text":"<p>You need to change the element <code>NetworkInterfaceAddress</code> to the network interface currently in use.</p> <ol> <li> <p>Find network interface.</p> <pre><code>ip addr\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group    default qlen 1000\n link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n inet 127.0.0.1/8 scope host lo\n    valid_lft forever preferred_lft forever\n inet6 ::1/128 scope host\n    valid_lft forever preferred_lft forever\n2: dummy0: &lt;BROADCAST,NOARP&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n link/ether 0e:fa:61:5e:35:cd brd ff:ff:ff:ff:ff:ff\n3: eth0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc pfifo_fast state DOWN group default qlen 1000\n link/ether 48:b0:2d:2b:7a:a8 brd ff:ff:ff:ff:ff:ff\n4: l4tbr0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n link/ether 82:24:ce:68:6a:bd brd ff:ff:ff:ff:ff:ff\n5: rndis0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc pfifo_fast master l4tbr0 state DOWN group default qlen 1000\n link/ether 82:24:ce:68:6a:bd brd ff:ff:ff:ff:ff:ff\n6: usb0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc pfifo_fast master l4tbr0 state DOWN group default qlen 1000\n link/ether 82:24:ce:68:6a:bf brd ff:ff:ff:ff:ff:ff\n7: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n link/ether 2c:16:db:a3:03:10 brd ff:ff:ff:ff:ff:ff\n inet 192.168.10.46/22 brd 192.168.11.255 scope global dynamic noprefixroute eth1\n    valid_lft 84077sec preferred_lft 84077sec\n inet6 fe80::9fcb:8fc6:a1a4:c6d2/64 scope link noprefixroute\n    valid_lft forever preferred_lft forever\n8: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default\n link/ether 02:42:0b:47:8f:45 brd ff:ff:ff:ff:ff:ff\n inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n    valid_lft forever preferred_lft forever\n</code></pre> <p> You can find a network interface such as <code>eth1</code>.</p> </li> <li> <p>Change the <code>NetworkInterfaceAddress</code>.</p> <pre><code>vi ~/cyclonedds/cyclonedds.xml\n</code></pre> <p>For example;  cyclonedds.xml</p> <pre><code> &lt;General&gt;\n-  &lt;NetworkInterfaceAddress&gt;lo&lt;/NetworkInterfaceAddress&gt;\n+  &lt;NetworkInterfaceAddress&gt;eth1&lt;/NetworkInterfaceAddress&gt;\n&lt;/General&gt;\n</code></pre> </li> </ol>"},{"location":"version-2.0/system-configuration/","title":"System configuration","text":"<p>TODO</p>"}]}